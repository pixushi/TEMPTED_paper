pr__glm_array[ii,ss,jj] <- pr.curve(predprob_glm[pcoa_mds$delivery_ind],
predprob_glm[!pcoa_mds$delivery_ind])$auc.integral
# random forest
rf_fit <- randomForest(delivery_ind~PC1+PC2, data=pcoa_mds)
predprob_rf <- predict(rf_fit, type = c("response"))
roc_rf_array[ii,ss,jj] <- roc.curve(predprob_rf[pcoa_mds$delivery_ind],
predprob_rf[!pcoa_mds$delivery_ind])$auc
pr_rf_array[ii,ss,jj] <- pr.curve(predprob_rf[pcoa_mds$delivery_ind],
predprob_rf[!pcoa_mds$delivery_ind])$auc.integral
}
}
}
pr_glm_array <- roc_glm_array <-
pr_rf_array <- roc_rf_array <-
array(0, dim=c(length(metric_name), nsim, length(nkeep)),
dimnames=list(metric_name, paste0('sim',1:nsim), paste0('nsample=',nkeep)))
for (jj in 1:length(nkeep)){
print(jj)
for (ss in 1:nsim){
ind_sub <- sampleID[ss,jj][[1]]
meta_sub <- meta_tab[ind_sub,]
for (ii in 1:length(metric_name)){
pcoa_dist <- distmat_all[[ii]][ind_sub,ind_sub]
pcoa_mds <- as.data.frame(cmdscale(pcoa_dist, k=2))
colnames(pcoa_mds) <- c("PC1", "PC2")
pcoa_mds$delivery_ind <- meta_sub[rownames(pcoa_dist),]$delivery_ind
# glm
glm_fit <- glm(delivery_ind~PC1+PC2, data=pcoa_mds)
predprob_glm <- predict(glm_fit, newdata=pcoa_mds, type = c("response"))
roc_glm_array[ii,ss,jj] <- roc.curve(predprob_glm[pcoa_mds$delivery_ind],
predprob_glm[!pcoa_mds$delivery_ind])$auc
pr_glm_array[ii,ss,jj] <- pr.curve(predprob_glm[pcoa_mds$delivery_ind],
predprob_glm[!pcoa_mds$delivery_ind])$auc.integral
# random forest
rf_fit <- randomForest(delivery_ind~PC1+PC2, data=pcoa_mds)
predprob_rf <- predict(rf_fit, type = c("response"))
roc_rf_array[ii,ss,jj] <- roc.curve(predprob_rf[pcoa_mds$delivery_ind],
predprob_rf[!pcoa_mds$delivery_ind])$auc
pr_rf_array[ii,ss,jj] <- pr.curve(predprob_rf[pcoa_mds$delivery_ind],
predprob_rf[!pcoa_mds$delivery_ind])$auc.integral
}
}
}
for (ii in 1:length(metric_name)){
write.csv(roc_glm_array[ii,,],
file=paste0('result/realsim_ecam_roc_sample_glm_PCoA_', metric_name[ii], '.csv'))
write.csv(pr_glm_array[ii,,],
file=paste0('result/realsim_ecam_pr_sample_glm_PCoA_', metric_name[ii], '.csv'))
write.csv(roc_rf_array[ii,,],
file=paste0('result/realsim_ecam_roc_sample_rf_PCoA_', metric_name[ii], '.csv'))
write.csv(pr_rf_array[ii,,],
file=paste0('result/realsim_ecam_pr_sample_rf_PCoA_', metric_name[ii], '.csv'))
}
roc_sub_rf_tempted <- read.csv('result/realsim_ecam_roc_sub_rf_tempted_clr.csv', row.names=1)
roc_sub_glm_tempted <- matrix(NA, nsim, length(nkeep))
colnames(roc_sub_glm_tempted) <- paste0("nsample", nkeep)
pr_sub_rf_tempted <- roc_sub_rf_tempted <- pr_sub_glm_tempted <- roc_sub_glm_tempted
for (jj in 1:length(nkeep)){
print(jj)
for (ss in 1:nsim){
fname <- paste0('tempted_subj_sim',ss,'_ntime',nkeep[jj], '.csv')
tempted_sub <- read.csv(file.path("simresult", fname), row.names=1)
# glm
glm_fit <- glm(delivery_ind ~ Component.1+Component.2,
data = tempted_sub, family = "binomial")
predprob_glm <- predict(glm_fit, newdata=tempted_sub, type = c("response"))
roc_sub_glm_tempted[ss,jj] <- roc.curve(predprob_glm[tempted_sub$delivery_ind],
predprob_glm[!tempted_sub$delivery_ind])$auc
pr_sub_glm_tempted[ss,jj] <- pr.curve(predprob_glm[tempted_sub$delivery_ind],
predprob_glm[!tempted_sub$delivery_ind])$auc.integral
# random forest
rf_fit <- randomForest(delivery_ind ~ Component.1+Component.2,
data = tempted_sub)
predprob_rf <- predict(rf_fit, type = c("response"))
roc_sub_rf_tempted[ss,jj] <- roc.curve(predprob_rf[tempted_sub$delivery_ind],
predprob_rf[!tempted_sub$delivery_ind])$auc
pr_sub_rf_tempted[ss,jj] <- pr.curve(predprob_rf[tempted_sub$delivery_ind],
predprob_rf[!tempted_sub$delivery_ind])$auc.integral
}
}
write.csv(roc_sub_glm_tempted,
file='result/realsim_ecam_roc_sub_glm_tempted_clr.csv')
write.csv(pr_sub_glm_tempted,
file='result/realsim_ecam_pr_sub_glm_tempted_clr.csv')
write.csv(roc_sub_rf_tempted,
file='result/realsim_ecam_roc_sub_rf_tempted_clr.csv')
write.csv(pr_sub_rf_tempted,
file='result/realsim_ecam_pr_sub_rf_tempted_clr.csv')
Fmodel_tempted <- read.csv('result/realsim_ecam_Fvalue_tempted_clr.csv', row.names=1)
roc_sub_glm_tempted <- read.csv('result/realsim_ecam_roc_sub_glm_tempted_clr.csv', row.names=1)
pr_sub_glm_tempted <- read.csv('result/realsim_ecam_pr_sub_glm_tempted_clr.csv', row.names=1)
roc_sub_rf_tempted <- read.csv('result/realsim_ecam_roc_sub_rf_tempted_clr.csv', row.names=1)
pr_sub_rf_tempted <- read.csv('result/realsim_ecam_pr_sub_rf_tempted_clr.csv', row.names=1)
roc_sample_glm_tempted <- read.csv('result/realsim_ecam_roc_sample_glm_tempted_clr.csv', row.names=1)
pr_sample_glm_tempted <- read.csv('result/realsim_ecam_pr_sample_glm_tempted_clr.csv', row.names=1)
roc_sample_rf_tempted <- read.csv('result/realsim_ecam_roc_sample_rf_tempted_clr.csv', row.names=1)
pr_sample_rf_tempted <- read.csv('result/realsim_ecam_pr_sample_rf_tempted_clr.csv', row.names=1)
roc_sample_rf_ctf <- read.csv('result/realsim_ecam_roc_sample_rf_ctf.csv', row.names=1)
pr_sample_rf_ctf <- read.csv('result/realsim_ecam_pr_sample_rf_ctf.csv', row.names=1)
roc_sub_glm_ctf <- matrix(NA, nsim, length(nkeep))
colnames(roc_sub_glm_ctf) <- paste0("nsample", nkeep)
pr_sub_rf_ctf <- roc_sub_rf_ctf <- pr_sub_glm_ctf <- roc_sub_glm_ctf
for (jj in 1:length(nkeep)){
ntime <- nkeep[jj]
for (ss in 1:nsim){
count_sub <- count_tab[sampleID[ss,jj][[1]],]
meta_sub <- meta_tab[sampleID[ss,jj][[1]],c("studyid", "day_of_life", "month", "delivery")]
meta_sub$studyid <- as.character(meta_sub$studyid)
meta_sub$month <- as.numeric(meta_sub$month)
meta_sub$delivery_ind <- meta_sub$delivery=="Vaginal"
fname <- paste0("subject-biplot_sim", ss, "_ntime", ntime, ".qza")
ctf_sub <- read_qza(file.path("simresult", fname))$data$Vectors
colnames(ctf_sub)[1] <- "studyid"
ctf_sub <- merge(ctf_sub, metauni)
# logistic regression
glm_fit <- glm(delivery_ind~PC1+PC2, data=ctf_sub)
predprob_glm <- predict(glm_fit, newdata=ctf_sub, type = c("response"))
roc_sub_glm_ctf[ss,jj] <- roc.curve(predprob_glm[ctf_sub$delivery_ind],
predprob_glm[!ctf_sub$delivery_ind])$auc
pr_sub_glm_ctf[ss,jj] <- pr.curve(predprob_glm[ctf_sub$delivery_ind],
predprob_glm[!ctf_sub$delivery_ind])$auc.integral
# random forest
rf_fit <- randomForest(delivery_ind~PC1+PC2, data=ctf_sub)
predprob_rf <- predict(rf_fit, type = c("response"))
roc_sub_rf_ctf[ss,jj] <- roc.curve(predprob_rf[ctf_sub$delivery_ind],
predprob_rf[!ctf_sub$delivery_ind])$auc
pr_sub_rf_ctf[ss,jj] <- pr.curve(predprob_rf[ctf_sub$delivery_ind],
predprob_rf[!ctf_sub$delivery_ind])$auc.integral
}
}
roc_sub_glm_ctf <- matrix(NA, nsim, length(nkeep))
colnames(roc_sub_glm_ctf) <- paste0("nsample", nkeep)
pr_sub_rf_ctf <- roc_sub_rf_ctf <- pr_sub_glm_ctf <- roc_sub_glm_ctf
for (jj in 1:length(nkeep)){
print(jj)
ntime <- nkeep[jj]
for (ss in 1:nsim){
count_sub <- count_tab[sampleID[ss,jj][[1]],]
meta_sub <- meta_tab[sampleID[ss,jj][[1]],c("studyid", "day_of_life", "month", "delivery")]
meta_sub$studyid <- as.character(meta_sub$studyid)
meta_sub$month <- as.numeric(meta_sub$month)
meta_sub$delivery_ind <- meta_sub$delivery=="Vaginal"
fname <- paste0("subject-biplot_sim", ss, "_ntime", ntime, ".qza")
ctf_sub <- read_qza(file.path("simresult", fname))$data$Vectors
colnames(ctf_sub)[1] <- "studyid"
ctf_sub <- merge(ctf_sub, metauni)
# logistic regression
glm_fit <- glm(delivery_ind~PC1+PC2, data=ctf_sub)
predprob_glm <- predict(glm_fit, newdata=ctf_sub, type = c("response"))
roc_sub_glm_ctf[ss,jj] <- roc.curve(predprob_glm[ctf_sub$delivery_ind],
predprob_glm[!ctf_sub$delivery_ind])$auc
pr_sub_glm_ctf[ss,jj] <- pr.curve(predprob_glm[ctf_sub$delivery_ind],
predprob_glm[!ctf_sub$delivery_ind])$auc.integral
# random forest
rf_fit <- randomForest(delivery_ind~PC1+PC2, data=ctf_sub)
predprob_rf <- predict(rf_fit, type = c("response"))
roc_sub_rf_ctf[ss,jj] <- roc.curve(predprob_rf[ctf_sub$delivery_ind],
predprob_rf[!ctf_sub$delivery_ind])$auc
pr_sub_rf_ctf[ss,jj] <- pr.curve(predprob_rf[ctf_sub$delivery_ind],
predprob_rf[!ctf_sub$delivery_ind])$auc.integral
}
}
write.csv(roc_sub_glm_ctf,
file='result/realsim_ecam_roc_sub_glm_ctf.csv')
write.csv(pr_sub_glm_ctf,
file='result/realsim_ecam_pr_sub_glm_ctf.csv')
write.csv(roc_sub_rf_ctf,
file='result/realsim_ecam_roc_sub_rf_ctf.csv')
write.csv(pr_sub_rf_ctf,
file='result/realsim_ecam_pr_sub_rf_ctf.csv')
roc_sub_rf_ctf <- read.csv('result/realsim_ecam_roc_sub_rf_ctf.csv', row.names=1)
pr_sub_rf_ctf <- read.csv('result/realsim_ecam_pr_sub_rf_ctf.csv', row.names=1)
roc_sample_rf_ctf <- read.csv('result/realsim_ecam_roc_sample_rf_ctf.csv', row.names=1)
pr_sample_rf_ctf <- read.csv('result/realsim_ecam_pr_sample_rf_ctf.csv', row.names=1)
roc_sample_glm_ctf <- read.csv('result/realsim_ecam_roc_sample_glm_ctf.csv', row.names=1)
pr_sample_glm_ctf <- read.csv('result/realsim_ecam_pr_sample_glm_ctf.csv', row.names=1)
tmp <- matrix(1, 10,2)
crossprod9tmp0
crossprod(tmp)
tcrossprod(tmp)
npc <- 2
roc_glm_oos <- matrix(NA, nsim, length(nkeep))
colnames(roc_glm_oos) <- paste0("nsample", nkeep)
pr_glm_oos <- roc_glm_oos
jj
jj=1
ss=1
count_sub <- count_tab[sampleID[ss,jj][[1]],]
meta_sub <- meta_tab[sampleID[ss,jj][[1]],]
subdata <- format_tempted(count_sub, meta_sub$day_of_life, meta_sub$studyid,
threshold=0.95, pseudo_count=0.5, transform='clr')
metauni_sub <- metauni[names(subdata),]
# leave one out prediction
predprob_glm <- rep(NA, length(subdata))
print(ii)
svd_train <- svd_centralize(subdata[-ii])
res_train <- tempted(svd_train, r = npc, resolution = 101, smooth=1e-4)
source("../TEMPTED.R")
print(ii)
svd_train <- svd_centralize(subdata[-ii])
print(ii)
svd_train <- svd_centralize(subdata[-ii])
source("../TEMPTED.R")
print(ii)
svd_train <- svd_centralize(subdata[-ii])
res_train <- tempted(svd_train, r = npc, resolution = 101, smooth=1e-4)
svd_train <- svd_centralize(subdata[-ii])
res_train <- tempted(svd_train$datlist, r = npc, resolution = 101, smooth=1e-4)
A_test <- est_A(subdata[ii], res_train, svd_train)
tmp <- A_test
npc
res_train <- tempted(subdata[-ii], r = npc, resolution = 101, smooth=1e-4)
A_test <- est_A(subdata[ii], res_train)
plot(A_tmp, A_test)
plot(tmp, A_test)
tmp
A_test
jj
ss
npc <- 2
roc_glm_oos <- matrix(NA, nsim, length(nkeep))
colnames(roc_glm_oos) <- paste0("nsample", nkeep)
pr_rf_oos <- roc_rf_oos <- pr_glm_oos <- roc_glm_oos
jj
ss
count_sub <- count_tab[sampleID[ss,jj][[1]],]
meta_sub <- meta_tab[sampleID[ss,jj][[1]],]
subdata <- format_tempted(count_sub, meta_sub$day_of_life, meta_sub$studyid,
threshold=0.95, pseudo_count=0.5, transform='clr')
metauni_sub <- metauni[names(subdata),]
# leave one out prediction
predprob_glm <- predprob_rf <- rep(NA, length(subdata))
for (ii in 1:length(subdata)){
print(ii)
#res_train <- tempted(subdata[-ii], r = npc, resolution = 101, smooth=1e-4)
#A_test <- est_A(subdata[ii], res_train)
svd_train <- svd_centralize(subdata[-ii])
res_train <- tempted(svd_train$datlist, r = npc, resolution = 101, smooth=1e-4)
A_test <- est_A(subdata[ii], res_train, svd_train)
dftrain <- data.frame(y=metauni[-ii,'delivery_ind'], x=res_train$A)
dftest <- data.frame(y=metauni[ii,'delivery_ind'], x=A_test)
# logistic regression
glm_fit <- glm(y ~ ., data = dftrain, family = "binomial")
predprob_glm[ii] <- predict(glm_fit, newdata=dftest, type = c("response"))
# random forest
rf_fit <- randomForest(y ~ ., data = dftrain)
predprob_rf[ii] <- predict(rf_fit, newdata=dftest, type = c("response"))
}
roc_glm_oos[ss,jj] <- roc.curve(predprob_glm[metauni_sub$delivery_ind],
predprob_glm[!metauni_sub$delivery_ind])$auc
pr_glm_oos[ss,jj] <- pr.curve(predprob_glm[metauni_sub$delivery_ind],
predprob_glm[!metauni_sub$delivery_ind])$auc.integral
roc_rf_oos[ss,jj] <- roc.curve(predprob_rf[metauni_sub$delivery_ind],
predprob_rf[!metauni_sub$delivery_ind])$auc
pr_rf_oos[ss,jj] <- pr.curve(predprob_rf[metauni_sub$delivery_ind],
predprob_rf[!metauni_sub$delivery_ind])$auc.integral
count_sub <- count_tab[sampleID[ss,jj][[1]],]
meta_sub <- meta_tab[sampleID[ss,jj][[1]],]
subdata <- format_tempted(count_sub, meta_sub$day_of_life, meta_sub$studyid,
threshold=0.95, pseudo_count=0.5, transform='clr')
metauni_sub <- metauni[names(subdata),]
# leave one out prediction
predprob_glm <- predprob_rf <- rep(NA, length(subdata))
for (ii in 1:length(subdata)){
print(ii)
res_train <- tempted(subdata[-ii], r = npc, resolution = 101, smooth=1e-4)
A_test <- est_A(subdata[ii], res_train)
#svd_train <- svd_centralize(subdata[-ii])
#res_train <- tempted(svd_train$datlist, r = npc, resolution = 101, smooth=1e-4)
#A_test <- est_A(subdata[ii], res_train, svd_train)
dftrain <- data.frame(y=metauni[-ii,'delivery_ind'], x=res_train$A)
dftest <- data.frame(y=metauni[ii,'delivery_ind'], x=A_test)
# logistic regression
glm_fit <- glm(y ~ ., data = dftrain, family = "binomial")
predprob_glm[ii] <- predict(glm_fit, newdata=dftest, type = c("response"))
# random forest
rf_fit <- randomForest(y ~ ., data = dftrain)
predprob_rf[ii] <- predict(rf_fit, newdata=dftest, type = c("response"))
}
roc.curve(predprob_glm[metauni_sub$delivery_ind],
predprob_glm[!metauni_sub$delivery_ind])$auc
roc_glm_oos[ss,jj]
pr.curve(predprob_glm[metauni_sub$delivery_ind],
predprob_glm[!metauni_sub$delivery_ind])$auc.integral
pr_glm_oos[ss,jj]
roc.curve(predprob_rf[metauni_sub$delivery_ind],
predprob_rf[!metauni_sub$delivery_ind])$auc
roc_rf_oos[ss,jj]
pr.curve(predprob_rf[metauni_sub$delivery_ind],
predprob_rf[!metauni_sub$delivery_ind])$auc.integral
pr_rf_oos[ss,jj]
jj
jj=9
count_sub <- count_tab[sampleID[ss,jj][[1]],]
meta_sub <- meta_tab[sampleID[ss,jj][[1]],]
subdata <- format_tempted(count_sub, meta_sub$day_of_life, meta_sub$studyid,
threshold=0.95, pseudo_count=0.5, transform='clr')
metauni_sub <- metauni[names(subdata),]
# leave one out prediction
predprob_glm <- predprob_rf <- rep(NA, length(subdata))
for (ii in 1:length(subdata)){
print(ii)
res_train <- tempted(subdata[-ii], r = npc, resolution = 101, smooth=1e-4)
A_test <- est_A(subdata[ii], res_train)
#svd_train <- svd_centralize(subdata[-ii])
#res_train <- tempted(svd_train$datlist, r = npc, resolution = 101, smooth=1e-4)
#A_test <- est_A(subdata[ii], res_train, svd_train)
dftrain <- data.frame(y=metauni[-ii,'delivery_ind'], x=res_train$A)
dftest <- data.frame(y=metauni[ii,'delivery_ind'], x=A_test)
# logistic regression
glm_fit <- glm(y ~ ., data = dftrain, family = "binomial")
predprob_glm[ii] <- predict(glm_fit, newdata=dftest, type = c("response"))
# random forest
rf_fit <- randomForest(y ~ ., data = dftrain)
predprob_rf[ii] <- predict(rf_fit, newdata=dftest, type = c("response"))
}
roc_glm_oos[ss,jj] <- roc.curve(predprob_glm[metauni_sub$delivery_ind],
predprob_glm[!metauni_sub$delivery_ind])$auc
pr_glm_oos[ss,jj] <- pr.curve(predprob_glm[metauni_sub$delivery_ind],
predprob_glm[!metauni_sub$delivery_ind])$auc.integral
roc_rf_oos[ss,jj] <- roc.curve(predprob_rf[metauni_sub$delivery_ind],
predprob_rf[!metauni_sub$delivery_ind])$auc
pr_rf_oos[ss,jj] <- pr.curve(predprob_rf[metauni_sub$delivery_ind],
predprob_rf[!metauni_sub$delivery_ind])$auc.integral
roc_glm_oos[ss,jj]
pr_glm_oos[ss,jj]
roc_rf_oos[ss,jj]
pr_rf_oos[ss,jj]
npc
npc=3
count_sub <- count_tab[sampleID[ss,jj][[1]],]
meta_sub <- meta_tab[sampleID[ss,jj][[1]],]
subdata <- format_tempted(count_sub, meta_sub$day_of_life, meta_sub$studyid,
threshold=0.95, pseudo_count=0.5, transform='clr')
metauni_sub <- metauni[names(subdata),]
# leave one out prediction
predprob_glm <- predprob_rf <- rep(NA, length(subdata))
for (ii in 1:length(subdata)){
print(ii)
res_train <- tempted(subdata[-ii], r = npc, resolution = 101, smooth=1e-4)
A_test <- est_A(subdata[ii], res_train)
#svd_train <- svd_centralize(subdata[-ii])
#res_train <- tempted(svd_train$datlist, r = npc, resolution = 101, smooth=1e-4)
#A_test <- est_A(subdata[ii], res_train, svd_train)
dftrain <- data.frame(y=metauni[-ii,'delivery_ind'], x=res_train$A)
dftest <- data.frame(y=metauni[ii,'delivery_ind'], x=A_test)
# logistic regression
glm_fit <- glm(y ~ ., data = dftrain, family = "binomial")
predprob_glm[ii] <- predict(glm_fit, newdata=dftest, type = c("response"))
# random forest
rf_fit <- randomForest(y ~ ., data = dftrain)
predprob_rf[ii] <- predict(rf_fit, newdata=dftest, type = c("response"))
}
roc_glm_oos[ss,jj] <- roc.curve(predprob_glm[metauni_sub$delivery_ind],
predprob_glm[!metauni_sub$delivery_ind])$auc
pr_glm_oos[ss,jj] <- pr.curve(predprob_glm[metauni_sub$delivery_ind],
predprob_glm[!metauni_sub$delivery_ind])$auc.integral
roc_rf_oos[ss,jj] <- roc.curve(predprob_rf[metauni_sub$delivery_ind],
predprob_rf[!metauni_sub$delivery_ind])$auc
pr_rf_oos[ss,jj] <- pr.curve(predprob_rf[metauni_sub$delivery_ind],
predprob_rf[!metauni_sub$delivery_ind])$auc.integral
roc_glm_oos[ss,jj]
pr_glm_oos[ss,jj]
npc
npc=2
roc_rf_oos[ss,jj]
pr_rf_oos[ss,jj]
count_sub <- count_tab[sampleID[ss,jj][[1]],]
meta_sub <- meta_tab[sampleID[ss,jj][[1]],]
subdata <- format_tempted(count_sub, meta_sub$day_of_life, meta_sub$studyid,
threshold=0.95, pseudo_count=0.5, transform='clr')
metauni_sub <- metauni[names(subdata),]
# leave one out prediction
predprob_glm <- predprob_rf <- rep(NA, length(subdata))
for (ii in 1:length(subdata)){
print(ii)
#res_train <- tempted(subdata[-ii], r = npc, resolution = 101, smooth=1e-4)
#A_test <- est_A(subdata[ii], res_train)
svd_train <- svd_centralize(subdata[-ii])
res_train <- tempted(svd_train$datlist, r = npc, resolution = 101, smooth=1e-4)
A_test <- est_A(subdata[ii], res_train, svd_train)
dftrain <- data.frame(y=metauni[-ii,'delivery_ind'], x=res_train$A)
dftest <- data.frame(y=metauni[ii,'delivery_ind'], x=A_test)
# logistic regression
glm_fit <- glm(y ~ ., data = dftrain, family = "binomial")
predprob_glm[ii] <- predict(glm_fit, newdata=dftest, type = c("response"))
# random forest
rf_fit <- randomForest(y ~ ., data = dftrain)
predprob_rf[ii] <- predict(rf_fit, newdata=dftest, type = c("response"))
}
roc_glm_oos[ss,jj] <- roc.curve(predprob_glm[metauni_sub$delivery_ind],
predprob_glm[!metauni_sub$delivery_ind])$auc
pr_glm_oos[ss,jj] <- pr.curve(predprob_glm[metauni_sub$delivery_ind],
predprob_glm[!metauni_sub$delivery_ind])$auc.integral
roc_rf_oos[ss,jj] <- roc.curve(predprob_rf[metauni_sub$delivery_ind],
predprob_rf[!metauni_sub$delivery_ind])$auc
pr_rf_oos[ss,jj] <- pr.curve(predprob_rf[metauni_sub$delivery_ind],
predprob_rf[!metauni_sub$delivery_ind])$auc.integral
roc_glm_oos[ss,jj]
pr_glm_oos[ss,jj]
roc_rf_oos[ss,jj]
pr_rf_oos[ss,jj]
npc
source("../TEMPTED.R")
npc <- 2
roc_glm_oos <- matrix(NA, nsim, length(nkeep))
colnames(roc_glm_oos) <- paste0("nsample", nkeep)
pr_rf_oos <- roc_rf_oos <- pr_glm_oos <- roc_glm_oos
for (jj in 1:length(nkeep)){
print(jj)
for (ss in 1:nsim){
count_sub <- count_tab[sampleID[ss,jj][[1]],]
meta_sub <- meta_tab[sampleID[ss,jj][[1]],]
subdata <- format_tempted(count_sub, meta_sub$day_of_life, meta_sub$studyid,
threshold=0.95, pseudo_count=0.5, transform='clr')
metauni_sub <- metauni[names(subdata),]
# leave one out prediction
predprob_glm <- predprob_rf <- rep(NA, length(subdata))
for (ii in 1:length(subdata)){
print(ii)
svd_train <- svd_centralize(subdata[-ii])
res_train <- tempted(svd_train$datlist, r = npc, resolution = 101, smooth=1e-4)
A_test <- est_A(subdata[ii], res_train, svd_train)
dftrain <- data.frame(y=metauni[-ii,'delivery_ind'], x=res_train$A)
dftest <- data.frame(y=metauni[ii,'delivery_ind'], x=A_test)
# logistic regression
glm_fit <- glm(y ~ ., data = dftrain, family = "binomial")
predprob_glm[ii] <- predict(glm_fit, newdata=dftest, type = c("response"))
# random forest
rf_fit <- randomForest(y ~ ., data = dftrain)
predprob_rf[ii] <- predict(rf_fit, newdata=dftest, type = c("response"))
}
roc_glm_oos[ss,jj] <- roc.curve(predprob_glm[metauni_sub$delivery_ind],
predprob_glm[!metauni_sub$delivery_ind])$auc
pr_glm_oos[ss,jj] <- pr.curve(predprob_glm[metauni_sub$delivery_ind],
predprob_glm[!metauni_sub$delivery_ind])$auc.integral
roc_rf_oos[ss,jj] <- roc.curve(predprob_rf[metauni_sub$delivery_ind],
predprob_rf[!metauni_sub$delivery_ind])$auc
pr_rf_oos[ss,jj] <- pr.curve(predprob_rf[metauni_sub$delivery_ind],
predprob_rf[!metauni_sub$delivery_ind])$auc.integral
}
write.csv(pr_glm_oos, file="result/realsim_ecam_pr_oos_glm_tempted.csv")
write.csv(roc_glm_oos, file="result/realsim_ecam_roc_oos_glm_tempted.csv")
write.csv(pr_rf_oos, file="result/realsim_ecam_pr_oos_rf_tempted.csv")
write.csv(roc_rf_oos, file="result/realsim_ecam_roc_oos_rf_tempted.csv")
}
?ggsave
rm(list=ls())
# for data
library(qiime2R) # read in Qiime artifacts
library(dplyr) # data formatting
library(tidyverse) # data formatting
# for computing
library(reticulate) # run py codes
library(vegan) # distance matrix
library(PERMANOVA) # permanova
library(randomForest) # random forest
library(PRROC) # roc and pr
# for plotting
library(ggpubr)
library(ggplot2)
library(gridExtra)
library(RColorBrewer)
# set working directory to be where the current script is located
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
source('../TEMPTED.R')
color_RB <- brewer.pal(3,'Set1')[1:2]
# Get data in 2nd and 3rd trimester
load("data/data_post.RData")
metadata_all <- post.df %>%
filter(DayVsDel < 0, LibrarySize >= 4e4, PregOut!="Miscarriage") %>%
select(Cohort, SampleID, PregID, DayVsConc, DayVsDel, PregOut, GDdel) %>%
group_by(PregID) %>% filter(n() > 1) %>% ungroup()
head(metadata_all)
metadata <- metadata_all %>% filter(DayVsConc >= 12*7, DayVsConc < 37*7)
ps_filtered <- prune_samples(metadata$SampleID, post.ps)
rm(list=ls())
# for data
library(qiime2R) # read in Qiime artifacts
library(dplyr) # data formatting
library(tidyverse) # data formatting
# for computing
library(reticulate) # run py codes
library(vegan) # distance matrix
library(PERMANOVA) # permanova
library(randomForest) # random forest
library(PRROC) # roc and pr
library(phyloseq) # phyloseq object
# for plotting
library(ggpubr)
library(ggplot2)
library(gridExtra)
library(RColorBrewer)
# set working directory to be where the current script is located
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
source('../TEMPTED.R')
color_RB <- brewer.pal(3,'Set1')[1:2]
load("data/data_post.RData")
metadata_all <- post.df %>%
filter(DayVsDel < 0, LibrarySize >= 4e4, PregOut!="Miscarriage") %>%
select(Cohort, SampleID, PregID, DayVsConc, DayVsDel, PregOut, GDdel) %>%
group_by(PregID) %>% filter(n() > 1) %>% ungroup()
head(metadata_all)
metadata <- metadata_all %>% filter(DayVsConc >= 12*7, DayVsConc < 37*7)
ps_filtered <- prune_samples(metadata$SampleID, post.ps)
ps_filtered <- filter_taxa(ps_filtered, function(x) sum(x!=0) >= 5, TRUE)
count_tab <- data.frame(otu_table(ps_filtered))
meta_tab <- data.frame(sample_data(ps_filtered))
?wilcox.test
getwd()
library(knitr)
knit("analysis_Stanford_vaginal_final.Rmd", "analysis_Stanford_vaginal_final.md")
