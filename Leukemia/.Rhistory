}
}
tab_auc_sample$classify <- gsub("glm", "Logistic Regression", tab_auc_sample$classify)
tab_auc_sample$classify <- gsub("rf", "Random Forest", tab_auc_sample$classify)
tab_auc_sample$method <- gsub("tempted_clr", "TEMPTED", tab_auc_sample$method)
tab_auc_sample$method <- gsub("ctf", "CTF", tab_auc_sample$method)
tab_auc_sample$method <- gsub("PCoA_Bray-Curtis", "Bray-Curtis", tab_auc_sample$method)
tab_auc_sample$method <- gsub("PCoA_unweighted_UniFrac", "UniFrac", tab_auc_sample$method)
tab_auc_sample$method <- gsub("PCoA_Weighted_UniFrac", "Weighted UniFrac", tab_auc_sample$method)
tab1 <- aggregate(auc~nsample+method+type+measure+classify, data=tab_auc_sample,
FUN=mean)
names(tab1)[6] <- 'mean'
tab2 <- aggregate(auc~nsample+method+type+measure+classify, data=tab_auc_sample,
FUN=function(x){sd(x)/sqrt(length(x))})
names(tab2)[6] <- 'se'
rownames(tab1) <-rownames(tab2) <- NULL
tab_auc_sample_summary <- merge(tab1, tab2)
tab_auc_sample_summary$nsample <- factor(tab_auc_sample_summary$nsample,
level=as.character(nkeep))
color_method <- c('#ff7f00', #orange for Bray
'#33a02c', #green for CTF
'#377eb8', #blue for TEMPTED
'#6a3d9a', #purple for Unifrac
'#e31a1c') #red for Weighted Unifrac
p_sample_roc <- ggplot(data=dplyr::filter(tab_auc_sample_summary, measure=="ROC"),
aes(x=nsample, y=mean, group=paste0(type,method), color=method)) +
geom_line(size=1, aes(linetype=type)) +
geom_point(size=2) +
geom_errorbar(aes(ymin=mean-2*se, ymax=mean+2*se, width=0.5), size=1) +
facet_wrap(.~classify, scales="free") +
labs(y='AUC-ROC error', x='# time points') +
ggtitle("Sample Level") +
scale_color_manual(values=color_method) +
theme_bw() +
theme(legend.position="bottom")
p_sample_roc
p_sample_pr <- ggplot(data=dplyr::filter(tab_auc_sample_summary, measure=="PR"),
aes(x=nsample, y=mean, group=paste0(type,method), color=method)) +
geom_line(size=1, aes(linetype=type)) +
geom_point(size=2) +
geom_errorbar(aes(ymin=mean-2*se, ymax=mean+2*se, width=0.5), size=1) +
facet_wrap(.~classify, scales="free") +
labs(y='AUC-PR error', x='# time points') +
ggtitle("Sample Level") +
scale_color_manual(values=color_method) +
theme_bw() +
theme(legend.position="bottom")
p_sample_pr
color_method <- c('#ff7f00', #orange for Bray
'#33a02c', #green for CTF
'#377eb8', #blue for TEMPTED
'#6a3d9a', #purple for Unifrac
'#e31a1c') #red for unweighted Unifrac
tab_lgd <- data.frame(Method=rep(c("Bray-Curtis", "CTF",
"TEMPTED", "UniFrac","Weighted UniFrac"),4),
value=rnorm(20), time=rnorm(20),
Type=c(rep("In-Sample",each=10), rep("Out-of-Sample", each=10)))
p_lgd <- ggplot(data=tab_lgd, aes(x=time, y=value, color=Method)) +
geom_point(size=2) + geom_line(aes(linetype=Type), size=1) +
scale_color_manual(values=color_method) +
theme(legend.position="bottom")
p_lgd
lgd <- get_legend(p_lgd)
color_method <- c('#ff7f00', #orange for Bray
'#33a02c', #green for CTF
'#377eb8', #blue for TEMPTED
'#6a3d9a', #purple for Unifrac
'#e31a1c') #red for unweighted Unifrac
tab_lgd <- data.frame(Method=rep(c("Bray-Curtis", "CTF",
"TEMPTED", "UniFrac","Weighted UniFrac"),4),
value=rnorm(20), time=rnorm(20),
Type=c(rep("In-Sample",each=10), rep("Out-of-Sample", each=10)))
p_lgd <- ggplot(data=tab_lgd, aes(x=time, y=value, color=Method)) +
geom_point(size=2) + geom_line(aes(linetype=Type), size=1) +
scale_color_manual(values=color_method) +
theme(legend.position="bottom")
p_lgd
lgd <- get_legend(p_lgd)
lay <- rbind(c(1,2,2),c(1,2,2),c(1,2,2),c(1,2,2),c(1,2,2),
c(3,3,3))
p_all <- grid.arrange(p_Fmodel_summary + theme(legend.position="none"),
p_subj_pr + theme(legend.position="none"),
lgd,
layout_matrix=lay)
p_subj_pr <- ggplot(data=dplyr::filter(tab_auc_subj_summary, measure=="PR"),
aes(x=nsample, y=mean, group=paste0(type,method), color=method)) +
geom_line(size=1, aes(linetype=type)) +
geom_point(size=2) +
geom_errorbar(aes(ymin=mean-2*se, ymax=mean+2*se, width=0.5), size=1) +
facet_wrap(.~classify) +
labs(y='AUC-PR error', x='# time points')+
ggtitle("Subject Level") +
scale_color_manual(values=color_method) +
theme_bw()
p_subj_pr
p_subj_pr
p_subj_pr <- ggplot(data=dplyr::filter(tab_auc_subj_summary, measure=="PR"),
aes(x=nsample, y=mean, group=paste0(type,method), color=method)) +
geom_line(size=1, aes(linetype=type)) +
geom_point(size=2) +
geom_errorbar(aes(ymin=mean-2*se, ymax=mean+2*se, width=0.5, linetype=type), size=1) +
facet_wrap(.~classify) +
labs(y='AUC-PR error', x='# time points')+
ggtitle("Subject Level") +
scale_color_manual(values=color_method) +
theme_bw()
p_subj_pr
p_subj_pr
tab1 <- aggregate(Fvalue~nsample+method, data=tab_Fmodel,
FUN=mean)
names(tab1)[3] <- 'mean'
tab2 <- aggregate(Fvalue~nsample+method, data=tab_Fmodel,
FUN=function(x){sd(x)/sqrt(length(x))})
names(tab2)[3] <- 'se'
rownames(tab1) <-rownames(tab2) <- NULL
tab_Fmodel_summary <- merge(tab1, tab2)
color_method <- c('#ff7f00', #orange for Bray
'#33a02c', #green for CTF
'#377eb8', #blue for TEMPTED
'#6a3d9a', #purple for Unifrac
'#e31a1c') #red for unweighted Unifrac
p_Fmodel_summary <- ggplot(data=tab_Fmodel_summary,
aes(x=nsample, y=mean, group=method, color=method)) +
geom_line(size=1) + geom_point(size=2) +
geom_errorbar(aes(ymin=mean-2*se, ymax=mean+2*se, width=1),
position=position_dodge(0.1), size=1) +
scale_x_continuous(breaks=2:10) +
scale_color_manual(values=color_method) +
ylab('PERMANOVA F value') + xlab('# time points') +
ggtitle("Sample Level") +
theme_bw() +
theme(legend.position = "bottom")
p_Fmodel_summary
ggplot(data=tab_Fmodel_summary,
aes(x=nsample, y=mean, group=method, color=method)) +
geom_line(size=1) + geom_point(size=2, position=position_dodge(0.1)) +
geom_errorbar(aes(ymin=mean-2*se, ymax=mean+2*se, width=1),
position=position_dodge(0.1), size=1) +
scale_x_continuous(breaks=2:10) +
scale_color_manual(values=color_method) +
ylab('PERMANOVA F value') + xlab('# time points') +
ggtitle("Sample Level") +
theme_bw() +
theme(legend.position = "bottom")
getwd()
rm(list=ls())
library(gridExtra)
library(ggplot2)
library(dplyr)
library(tidyverse)
library(tidyverse)
library(RColorBrewer)
library(ggpubr)
# set working directory to be where the current script is located
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
source('../TEMPTED.R')
color_RB <- brewer.pal(3,'Set1')[1:2]
tb_vaginal <- read.csv("result/Vaginal_microbiome_feature_loadings_w_taxonomy.csv", row.names=1, sep=",")
plot(tb_vaginal$Component.1, tb_vaginal$Component.2)
sel <- tb_vaginal$Component.1 %>% (function(x){which(abs(x)>=quantile(abs(x),0.95))})
tb_vaginal_sel <- tb_vaginal[sel,] %>% mutate(sign=ifelse(Component.1<0,"Preterm","Term"))
# get species labels, if NA, use family labels
label_s <- substring(tb_vaginal_sel$Species, 4, 30)
label_f <- substring(tb_vaginal_sel$Family, 4, 30)
label_s[which(nchar(label_s)==0)] <- label_f[which(nchar(label_s)==0)]
tb_vaginal_sel$label <- paste0(label_s,
" PG", substring(rownames(tb_vaginal_sel),5,6))
tb_vaginal_sel <- tb_vaginal_sel %>% arrange(-Component.1)
tb_vaginal_sel$label <- factor(tb_vaginal_sel$label, levels=unique(tb_vaginal_sel$label))
p_bar <- tb_vaginal_sel %>%
ggplot(aes(x=label, y=Component.1)) +
geom_bar(stat="identity", colour="black", width = 0.5, aes(fill = sign)) +
geom_hline(yintercept = 0) +
theme_bw() +
scale_fill_manual(values=color_RB) +
coord_flip() +
labs(y = "Component 1", x = "") +
theme(legend.position="none")
ratio_vaginal <- read.csv("result/Vaginal_microbiome_log_ratios_per_sample_Pixu.csv", row.names=1, sep=",")
ratio_vaginal <- filter(ratio_vaginal, !is.na(Log_ratios))
ratio_vaginal$Group2 <- ifelse(ratio_vaginal$Group=="TB", "Term", "Preterm")
with(ratio_vaginal, table(Group, Group2))
time_vec_ratio <- ratio_vaginal$Timepoint
# plot timeline
meta_ordered <- ratio_vaginal %>%
arrange(Group2, -Timepoint) %>%
mutate(PregID=factor(subjects, levels=unique(subjects)))
sub_vaginal <- read.csv("result/Vaginal_microbiome_subject_loadings.csv",
row.names=1)
sub_vaginal$group2 <- ifelse(sub_vaginal$group=="TB", "Term", "Preterm")
with(sub_vaginal, table(group, group2))
1065*0.005
rm(list=ls())
# for data
library(readr) # read tsv
library(qiime2R) # read in Qiime artifacts
library(dplyr) # data formatting
library(yaml) # for read_qza() in qiime2R
# for computing
library(reticulate) # run py codes
library(phyloseq) # phyloseq object
library(vegan) # distance matrix
library(PERMANOVA) # permanova
library(randomForest) # random forest
library(PRROC) # roc and pr
# for plotting
library(ggpubr)
library(ggplot2)
library(gridExtra)
library(RColorBrewer)
library(plotly)
# set working directory to be where the current script is located
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
source('../TEMPTED.R')
col_group <- c(brewer.pal(6,'Set2')[6], brewer.pal(6,'Set1')[c(1,3)])
col_microbe <- c(brewer.pal(6,'Set1')[c(2,4)], brewer.pal(6,'Set2')[4])
npc <- 3 # number of components
bws <- 8 # for plotting
getwd()
setwd("../Leukemia/")
source('../TEMPTED.R')
col_group <- c(brewer.pal(6,'Set2')[6], brewer.pal(6,'Set1')[c(1,3)])
col_microbe <- c(brewer.pal(6,'Set1')[c(2,4)], brewer.pal(6,'Set2')[4])
npc <- 3 # number of components
bws <- 8 # for plotting
meta_all <- read.csv("data/metadata_cleaned.csv", row.names=1)
meta_all$group <- factor(meta_all$group, levels=
c("genotype=WT, disease=no",
"genotype=Pax5+/-, disease=no",
"genotype=Pax5+/-, disease=pB-ALL"))
count_all <- read.csv("data/count_cleaned.csv", row.names=1)
load("data/distance_mat.Rdata")
metauni <- unique(meta_all[,c('hostID', 'genotype', 'diseased', 'group')])
metauni$group <- factor(metauni$group, sort(levels(metauni$group)))
rownames(metauni) <- metauni$hostID
table(metauni$group)
datlist_all <- format_tempted(count_all, meta_all$week, meta_all$hostID,
threshold=0.95, pseudo_count=0.5, transform='clr')
print(dim(datlist_all[[1]]))
svd_all <- svd_centralize(datlist_all, 1)
res_tempted_all <- tempted(svd_all$datlist, r = npc, resolution = 51, smooth=1e-4)
dim(count_all)
dim(datlist_all[[1]])
res_tempted <- res_tempted_all
svd_tempted <- svd_all
meta_tab <- meta_all
count_tab <- count_all
datlist <- datlist_all
A.hat <- metauni
rownames(A.hat) <- A.hat$hostID
table(rownames(A.hat)==rownames(res_tempted$A.hat))
A.hat <- cbind(res_tempted$A.hat[,1:3], A.hat)
A.hat$group <- factor(A.hat$group,
levels=c("genotype=WT, disease=no", "genotype=Pax5+/-, disease=no",
"genotype=Pax5+/-, disease=pB-ALL"))
p_sub <- plot_ly(A.hat, x=~`Component 1`, y=~`Component 2`, z=~`Component 3`,
color=~group, colors=col_group)
p_sub <- p_sub %>% add_markers(marker=list(size=5))
p_sub <- p_sub %>% layout(scene=list(xaxis=list(title="Component 1", titlefont = list(size = 20)),
yaxis=list(title="Component 2", titlefont = list(size = 20)),
zaxis=list(title="Component 3", titlefont = list(size = 20))),
legend = list(font = list(size = 20), orientation = "h"))
p_sub
p_sub23 <- ggplot(data=A.hat, aes(x=`Component 2`, y=`Component 3`)) +
geom_point(aes(color=group)) +
scale_color_manual(values=col_group) +
theme_bw()+
theme(legend.position='bottom')
datlist_raw <- format_tempted(count_all, meta_all$week, meta_all$hostID,
threshold=0.95, transform='none')
ratio_feat <- ratio_feature(res_tempted, datlist_raw, pct=0.005)
table(ratio_feat$toppct)
length(ratio_feat$toppct)
3192*0.005
3192*0.006
18/3192
dim(datlist_raw[[1]])
18/1065
datlist <- datlist_raw
pct=0.005
absolute=FALSE
contrast=NULL
B.data <- as.data.frame(res_tempted$B.hat)
if (!is.null(contrast)){
contrast.data <- res_tempted$B.hat%*%contrast
colnames(contrast.data) <- paste('Contrast', 1:ncol(contrast))
B.data <- cbind(B.data, contrast.data)
}
if(!absolute){
toppct <- apply(B.data, 2, function(x){x>quantile(x, 1-pct) & x>0})
bottompct <- apply(-B.data, 2, function(x){x>quantile(x, 1-pct) & x>0})
}else{
toppct <- apply(B.data, 2, function(x){abs(x)>quantile(abs(x), 1-pct) & x>0})
bottompct <- apply(B.data, 2, function(x){abs(x)>quantile(abs(x), 1-pct) & x<0})
}
dim(B.data)
apply(B.data,2,function(x){quantile(x,1-pct)})
dim(ratio_feat)
dim(ratio_feat$toppct)
colSums(ratio_feat$toppct)
6/1064
5/1064
rownames(res_tempted$B.hat)
rownames(B.data)[ratio_feat$toppct[,2]]
rownames(B.data)[ratio_feat$bottompct[,2]]
# the log ratio is constructed using the followng features
load("data/leukemia_physeq.Rdata")
saveRDS(mice_phyloseq, file="data/leukemia_physeq.RDS")
# the log ratio is constructed using the followng features
mice_phyloseq <- readRDS("data/leukemia_physeq.RDS")
t2 <- rownames(B.data)[ratio_feat$toppct[,2]]
b2 <- rownames(B.data)[ratio_feat$bottompct[,2]]
t3 <- rownames(B.data)[ratio_feat$toppct[,3]]
b3 <- rownames(B.data)[ratio_feat$bottompct[,3]]
tax_table(mice_phyloseq)[c(t2,b2,t3,b3)]
# the log ratio is constructed using the followng features
taxg2 <- read_tsv("data/gg2-taxonomy.tsv")
dim(taxg2)
taxg2[c(t2,b2,t3,b3)]
taxg2[c(t2,b2,t3,b3),]
# the log ratio is constructed using the followng features
taxg2 <- read.csv("data/gg2-taxonomy.tsv", sep="\t")
# the log ratio is constructed using the followng features
taxg2 <- read.csv("data/gg2-taxonomy.tsv", sep="\t", row.names=1)
dim(taxg2)
head(taxg2)
taxg2[c(t2,b2,t3,b3),]
taxg2[c(t2,b2,t3,b3),]
dim(taxg2[c(t2,b2,t3,b3),])
taxg2[c(t2,b2),]
taxg2[c(t3,b3),]
dim(count_all)
datlist_all <- format_tempted(count_all, meta_all$week, meta_all$hostID,
threshold=0.9, pseudo_count=0.5, transform='clr')
print(dim(datlist_all[[1]]))
svd_all <- svd_centralize(datlist_all, 1)
res_tempted_all <- tempted(svd_all$datlist, r = npc, resolution = 51, smooth=1e-4)
es_tempted <- res_tempted_all
svd_tempted <- svd_all
meta_tab <- meta_all
count_tab <- count_all
datlist <- datlist_all
p_time <- plot_time_loading(res_tempted, r=3) + scale_color_manual(values=col_microbe) +
labs(x='Week', y="Temporal Loading", color="Component") +
geom_line(size=1.5) + theme_bw() +
theme(legend.position='bottom')
p_time
A.hat <- metauni
rownames(A.hat) <- A.hat$hostID
table(rownames(A.hat)==rownames(res_tempted$A.hat))
A.hat <- cbind(res_tempted$A.hat[,1:3], A.hat)
A.hat$group <- factor(A.hat$group,
levels=c("genotype=WT, disease=no", "genotype=Pax5+/-, disease=no",
"genotype=Pax5+/-, disease=pB-ALL"))
p_sub <- plot_ly(A.hat, x=~`Component 1`, y=~`Component 2`, z=~`Component 3`,
color=~group, colors=col_group)
p_sub <- p_sub %>% add_markers(marker=list(size=5))
p_sub <- p_sub %>% layout(scene=list(xaxis=list(title="Component 1", titlefont = list(size = 20)),
yaxis=list(title="Component 2", titlefont = list(size = 20)),
zaxis=list(title="Component 3", titlefont = list(size = 20))),
legend = list(font = list(size = 20), orientation = "h"))
p_sub
datlist_raw <- format_tempted(count_all, meta_all$week, meta_all$hostID,
threshold=0.9, transform='none')
ratio_feat <- ratio_feature(res_tempted, datlist_raw, pct=0.005)
rownames(res_tempted$B.data)[ratio_feat$toppct[,2]]
datlist_raw <- format_tempted(count_all, meta_all$week, meta_all$hostID,
threshold=0.9, transform='none')
ratio_feat <- ratio_feature(res_tempted, datlist_raw, pct=0.01)
colSums(ratio_feat$toppct)
datlist_raw <- format_tempted(count_all, meta_all$week, meta_all$hostID,
threshold=0.9, transform='none')
ratio_feat <- ratio_feature(res_tempted, datlist_raw, pct=0.01)
dim(count_all)
dim(datlist_raw[[1]])
dim(res_tempted$B.hat)
atlist_all <- format_tempted(count_all, meta_all$week, meta_all$hostID,
threshold=0.9, pseudo_count=0.5, transform='clr')
print(dim(datlist_all[[1]]))
svd_all <- svd_centralize(datlist_all, 1)
res_tempted_all <- tempted(svd_all$datlist, r = npc, resolution = 51, smooth=1e-4)
dim(res_tempted_all)
dim(res_tempted_all$B.hat)
res_tempted <- res_tempted_all
svd_tempted <- svd_all
meta_tab <- meta_all
count_tab <- count_all
datlist <- datlist_all
datlist_raw <- format_tempted(count_all, meta_all$week, meta_all$hostID,
threshold=0.9, transform='none')
ratio_feat <- ratio_feature(res_tempted, datlist_raw, pct=0.01)
names(ratio_feat)
# the log ratio is constructed using the followng features
rownames(res_tempted$B.data)[ratio_feat$toppct[,2]]
rownames(res_tempted$B.data)[ratio_feat$bottompct[,2]]
rownames(res_tempted$B.data)[ratio_feat$toppct[,3]]
rownames(res_tempted$B.data)[ratio_feat$bottompct[,3]]
datlist_raw <- format_tempted(count_all, meta_all$week, meta_all$hostID,
threshold=0.9, transform='none')
ratio_feat <- ratio_feature(res_tempted, datlist_raw, pct=0.05)
names(ratio_feat)
colSums(ratio_feat$toppct)
ratio_feat <- ratio_feature(res_tempted, datlist_raw, pct=0.01)
colSums(ratio_feat$toppct)
tab_feat_ratio <- ratio_feat$metafeature.ratio
colnames(tab_feat_ratio)[2] <- 'hostID'
tab_feat_ratio <- merge(tab_feat_ratio, metauni)
## summed up, by mean and sd
reshape_feat_ratio <- reshape(tab_feat_ratio,
idvar=c("hostID","timepoint") ,
v.names=c("value"), timevar="PC",
direction="wide")
CC <- grep("value", colnames(reshape_feat_ratio))
colnames(reshape_feat_ratio)[CC] <- paste("Component", 1:length(CC))
feature_mat_ratio <- reshape_feat_ratio[,c("Component 2", "Component 3")]
time_vec_ratio <- reshape_feat_ratio$timepoint
group_vec_ratio <- factor(reshape_feat_ratio$group,
levels=c("genotype=WT, disease=no", "genotype=Pax5+/-, disease=no",
"genotype=Pax5+/-, disease=pB-ALL"))
p_feat_ratio_summary <- plot_feature_summary(feature_mat_ratio,
time_vec_ratio,
group_vec_ratio, bws=bws, nrow=1) +
xlab('Week') + theme_bw() +
theme(legend.position='bottom') +
scale_color_manual(values=col_group) + scale_fill_manual(values=col_group)
p_feat_ratio_summary
datlist_raw <- format_tempted(count_all, meta_all$week, meta_all$hostID,
threshold=0.9, transform='none')
ratio_feat <- ratio_feature(res_tempted, datlist_raw, pct=0.01)
names(ratio_feat)
# the log ratio is constructed using the followng features
rownames(res_tempted$B.data)[ratio_feat$toppct[,2]]
rownames(res_tempted$B.data)[ratio_feat$bottompct[,2]]
rownames(res_tempted$B.data)[ratio_feat$toppct[,3]]
rownames(res_tempted$B.data)[ratio_feat$bottompct[,3]]
## summed up, by individual subject
tab_feat_ratio <- ratio_feat$metafeature.ratio
colnames(tab_feat_ratio)[2] <- 'hostID'
tab_feat_ratio <- merge(tab_feat_ratio, metauni)
## summed up, by mean and sd
reshape_feat_ratio <- reshape(tab_feat_ratio,
idvar=c("hostID","timepoint") ,
v.names=c("value"), timevar="PC",
direction="wide")
CC <- grep("value", colnames(reshape_feat_ratio))
colnames(reshape_feat_ratio)[CC] <- paste("Component", 1:length(CC))
feature_mat_ratio <- reshape_feat_ratio[,c("Component 2", "Component 3")]
time_vec_ratio <- reshape_feat_ratio$timepoint
group_vec_ratio <- factor(reshape_feat_ratio$group,
levels=c("genotype=WT, disease=no", "genotype=Pax5+/-, disease=no",
"genotype=Pax5+/-, disease=pB-ALL"))
p_feat_ratio_summary <- plot_feature_summary(feature_mat_ratio,
time_vec_ratio,
group_vec_ratio, bws=bws, nrow=1) +
xlab('Week') + theme_bw() +
theme(legend.position='bottom') +
scale_color_manual(values=col_group) + scale_fill_manual(values=col_group)
p_feat_ratio_summary
ratio_feat <- ratio_feature(res_tempted, datlist_raw, pct=0.005)
names(ratio_feat)
# the log ratio is constructed using the followng features
rownames(res_tempted$B.data)[ratio_feat$toppct[,2]]
rownames(res_tempted$B.data)[ratio_feat$bottompct[,2]]
rownames(res_tempted$B.data)[ratio_feat$toppct[,3]]
rownames(res_tempted$B.data)[ratio_feat$bottompct[,3]]
## summed up, by individual subject
tab_feat_ratio <- ratio_feat$metafeature.ratio
colnames(tab_feat_ratio)[2] <- 'hostID'
tab_feat_ratio <- merge(tab_feat_ratio, metauni)
## summed up, by mean and sd
reshape_feat_ratio <- reshape(tab_feat_ratio,
idvar=c("hostID","timepoint") ,
v.names=c("value"), timevar="PC",
direction="wide")
CC <- grep("value", colnames(reshape_feat_ratio))
colnames(reshape_feat_ratio)[CC] <- paste("Component", 1:length(CC))
feature_mat_ratio <- reshape_feat_ratio[,c("Component 2", "Component 3")]
time_vec_ratio <- reshape_feat_ratio$timepoint
group_vec_ratio <- factor(reshape_feat_ratio$group,
levels=c("genotype=WT, disease=no", "genotype=Pax5+/-, disease=no",
"genotype=Pax5+/-, disease=pB-ALL"))
p_feat_ratio_summary <- plot_feature_summary(feature_mat_ratio,
time_vec_ratio,
group_vec_ratio, bws=bws, nrow=1) +
xlab('Week') + theme_bw() +
theme(legend.position='bottom') +
scale_color_manual(values=col_group) + scale_fill_manual(values=col_group)
p_feat_ratio_summary
gewtd()
getwd()
cbind(pval_permanova_late,
Fval_permanova_late)
tmp <- read.csv("../figure_table/leukemia_permanova.csv", row.names = 1)
tmp
t(tmp)
library(xtable)
xtable(t(tmp))
?xtable
t(tmp)
xtable(t(tmp), digits=3)
tmp
tmp <- read.csv('../figure_table/leukemia_wilcox_pcoa.csv', row.names=1)
xtable(tmp, digits=3)
xtable(t(tmp), digits=3)
t(tmp)
xtable(t(tmp)[,c(3,4,1,2,5,6)], digits=3)
reticulate::py_version()
py_version
py_version()
reticulate::py_available()
library(reticulate)
py_version()
