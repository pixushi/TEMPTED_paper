datlist_raw <- format_tempted(count_all, meta_all$week, meta_all$hostID,
threshold=0.95, transform='none')
ratio_feat <- ratio_feature(res_tempted, datlist_raw, pct=0.005)
## summed up, by individual subject
tab_feat_ratio <- ratio_feat$metafeature_ratio
colnames(tab_feat_ratio)[2] <- 'hostID'
tab_feat_ratio <- merge(tab_feat_ratio, metauni)
## summed up, by mean and sd
reshape_feat_ratio <- reshape(tab_feat_ratio,
idvar=c("hostID","timepoint") ,
v.names=c("value"), timevar="PC",
direction="wide")
CC <- grep("value", colnames(reshape_feat_ratio))
colnames(reshape_feat_ratio)[CC] <- paste("Component", 1:length(CC))
feature_mat_ratio <- reshape_feat_ratio[,c("Component 2", "Component 3")]
time_vec_ratio <- reshape_feat_ratio$timepoint
group_vec_ratio <- factor(reshape_feat_ratio$group,
levels=c("healthy wild type", "predisposed, remained healthy", "predisposed, developed pB-ALL"))
p_feat_ratio_summary <- plot_feature_summary(feature_mat_ratio,
time_vec_ratio,
group_vec_ratio, bws=bws, nrow=1) +
xlab('Week') + theme_bw() +
theme(legend.position='bottom') +
scale_color_manual(values=col_group) + scale_fill_manual(values=col_group)
p_feat_ratio_summary
ftnames <- rownames(datlist_raw[[1]])[-1]
tab_ftnames <- NULL
for (ii in 1:npc){
tab_ftnames <- rbind(tab_ftnames,
data.frame(sequence=ftnames[ratio_feat$toppct[,ii]],
PC=ii, rank="Top"))
tab_ftnames <- rbind(tab_ftnames,
data.frame(sequence=ftnames[ratio_feat$bottompct[,ii]],
PC=ii, rank="Bottom"))
}
taxtab <- read.csv("data/gg2-taxonomy.tsv", sep="\t", row.names=1)
tab_ftnames <- cbind(tab_ftnames, taxtab[tab_ftnames$sequence,])
tab_ftnames
head(tab_fnames)
head(tab_ftnames)
colnames(tab_ftnames)
tab_ftnames$Taxon
tab_taxsplit <- strsplit(tab_ftnames$Taxon, ";")
tab_taxsplit
strsplit(tab_ftnames$Taxon[1], ";")
strsplit(tab_ftnames$Taxon[1], ";")[[1]]
tab_taxsplit <- apply(tab_ftnames$Taxon, function(x){
valreturn <- rep(NA,7)
tmp <- strsplit(x, ";")[[1]];
valreturn[1:length(tmp)] <- tmp
return(valreturn)
})
tab_taxsplit <- lapply(tab_ftnames$Taxon, function(x){
valreturn <- rep(NA,7)
tmp <- strsplit(x, ";")[[1]];
valreturn[1:length(tmp)] <- tmp
return(valreturn)
})
tab_taxsplit
?lapply
tab_taxsplit <- lapply(tab_ftnames$Taxon, function(x){
valreturn <- rep(NA,7)
tmp <- strsplit(x, ";")[[1]];
valreturn[1:length(tmp)] <- tmp
return(valreturn)
}, simplify=TRUE)
tab_taxsplit <- sapply(tab_ftnames$Taxon, function(x){
valreturn <- rep(NA,7)
tmp <- strsplit(x, ";")[[1]];
valreturn[1:length(tmp)] <- tmp
return(valreturn)
}, simplify=TRUE)
tab_taxsplit
funtmp <- function(x){
valreturn <- rep(NA,7)
tmp <- strsplit(x, ";")[[1]];
valreturn[1:length(tmp)] <- tmp
return(valreturn)
}
funtmp(tab_ftnames$Taxon[1])
funtmp(tab_ftnames$Taxon[2])
funtmp(tab_ftnames$Taxon[3])
lapply(tab_ftnames$Taxon, function(x){strsplit(x, ";")[[1]]}, simplify=TRUE)
sapply(tab_ftnames$Taxon, function(x){strsplit(x, ";")[[1]]}, simplify=TRUE)
sapply(tab_ftnames$Taxon, function(x){strsplit(x, ";")[[1]]})
lapply(tab_ftnames$Taxon, function(x){strsplit(x, ";")[[1]]})
tab_taxsplit <- lapply(tab_ftnames$Taxon, function(x){strsplit(x, ";")[[1]]})
sapply(tab_taxsplit, length)
tab_taxsplit <- t(matrix(unlist(lapply(tab_ftnames$Taxon, function(x){strsplit(x, ";")[[1]]}), nrow=7))
)
tab_taxsplit <- t(matrix(unlist(lapply(tab_ftnames$Taxon, function(x){strsplit(x, ";")[[1]]})), nrow=7))
tab_taxsplit
lapply(tab_ftnames$Taxon, function(x){strsplit(x, ";")[[1]]}))
lapply(tab_ftnames$Taxon, function(x){strsplit(x, ";")[[1]]})
sapply(tab_ftnames$Taxon, function(x){strsplit(x, ";")[[1]]})
sapply(tab_ftnames$Taxon, function(x){strsplit(x, ";")[1]})
sapply(tab_ftnames$Taxon, function(x){tmp<-strsplit(x, ";")[[1]]; names(tmp)=NULL; tmp})
sapply(tab_ftnames$Taxon, function(x){tmp<-strsplit(x, ";")[[1]]; names(tmp)=NULL; tmp})
sapply(tab_ftnames$Taxon[1:2], function(x){strsplit(x, ";")[1]})
class(sapply(tab_ftnames$Taxon[1:2], function(x){strsplit(x, ";")[1]}))
apply(tab_ftnames$Taxon[1:2], function(x){strsplit(x, ";")[1]})
tab_taxsplit <- t(matrix(unlist(lapply(tab_ftnames$Taxon, function(x){strsplit(x, ";")[[1]]})), nrow=7))
colnames(tab_taxsplit) <- c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")
taxtab <- read.csv("data/gg2-taxonomy.tsv", sep="\t", row.names=1)
tab_ftnames <- cbind(tab_ftnames, taxtab[tab_ftnames$sequence,])
tab_taxsplit <- t(matrix(unlist(lapply(tab_ftnames$Taxon, function(x){strsplit(x, ";")[[1]]})), nrow=7))
colnames(tab_taxsplit) <- c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")
tab_ftnames <- cbind(tab_ftnames, tab_taxsplit)
tab_ftnames
tab_ftnames$Species
tab_ftnames <- tab_ftnames %>% mutate(shortname=ifelse(nchar(Species)>3, Species, Genus))
shortname <- tab_taxsplit$Species
shortname[nchar(shortname)<=3] <- tab_taxsplit$Genus[nchar(shortname)<=3]
tab_taxsplit <- t(matrix(unlist(lapply(tab_ftnames$Taxon, function(x){strsplit(x, ";")[[1]]})), nrow=7))
colnames(tab_taxsplit) <- c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")
shortname <- tab_taxsplit$Species
shortname <- tab_taxsplit[, "Species"]
shortname[nchar(shortname)<=3] <- tab_taxsplit[nchar(shortname)<=3, "Genus"]
shortname
tab_taxsplit <- t(matrix(unlist(lapply(tab_ftnames$Taxon, function(x){strsplit(x, "; ")[[1]]})), nrow=7))
colnames(tab_taxsplit) <- c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")
shortname <- tab_taxsplit[, "Species"]
shortname[nchar(shortname)<=3] <- tab_taxsplit[nchar(shortname)<=3, "Genus"]
shortname
shortname <- tab_taxsplit[, "Species"]
for (j in colnames(tab_taxsplit)[6:1]){
shortname[nchar(shortname)<=3] <- tab_taxsplit[nchar(shortname)<=3, j]
}
shortname
# the log ratio is constructed using the following features
ftnames <- rownames(datlist_raw[[1]])[-1]
tab_ftnames <- NULL
for (ii in 1:npc){
tab_ftnames <- rbind(tab_ftnames,
data.frame(sequence=ftnames[ratio_feat$toppct[,ii]],
PC=ii, rank="Top"))
tab_ftnames <- rbind(tab_ftnames,
data.frame(sequence=ftnames[ratio_feat$bottompct[,ii]],
PC=ii, rank="Bottom"))
}
taxtab <- read.csv("data/gg2-taxonomy.tsv", sep="\t", row.names=1)
tab_ftnames <- cbind(tab_ftnames, taxtab[tab_ftnames$sequence,])
tab_taxsplit <- t(matrix(unlist(lapply(tab_ftnames$Taxon, function(x){strsplit(x, "; ")[[1]]})), nrow=7))
colnames(tab_taxsplit) <- c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")
tab_ftnames <- cbind(tab_ftnames, tab_taxsplit)
shortname <- tab_taxsplit[, "Species"]
for (j in colnames(tab_taxsplit)[6:1]){
shortname[nchar(shortname)<=3] <- tab_taxsplit[nchar(shortname)<=3, j]
}
tab_ftnames$shortname <- shortname
write.csv(tab_ftnames, file="../figure_table/leukemia_topfeature.csv")
tab_ftnames$shortname
ii=2
tab_ftnames_pc <- dplyr::filter(tab_ftnames, PC==ii)
topfeat_pc <- tab_ftnames_pc$sequence
prop_all <- (count_all)/rowSums(count_all)
if (ii==2){
feat_mat_pc <- prop_all[meta_all$genotype!="WT",topfeat_pc]
meta_pc <- meta_all[meta_all$genotype!="WT",]
}
if (ii==3){
feat_mat_pc <- prop_all[,topfeat_pc]
meta_pc <- meta_all
}
nfeat <- ncol(feat_mat_pc)
tab_topfeat <- data.frame(RA=as.vector(as.matrix(feat_mat_pc)),
feature=rep(tab_ftnames_pc$shortname, each=nrow(feat_mat_pc)),
time=rep(meta_pc$week, nfeat),
group=rep(meta_pc[,ifelse(ii==2, "group", "genotype")], nfeat),
hostID=rep(meta_pc$hostID, nfeat))
p_topfeat <- ggplot(data=tab_topfeat) +
geom_point(aes(x=time, y=RA, color=group), size=0.8) +
facet_wrap(vars(feature), nrow=3) +
theme_bw() +
labs(x="Week", y="Relative Abundance", color=ifelse(ii==2, "Outcome", "Genotype")) +
ggtitle(paste0("Top Features Identified by PC", ii)) + theme(legend.position="bottom")
print(p_topfeat)
if (ii==2){
p_topfeat <- p_topfeat + geom_vline(xintercept = 35, linetype="dashed",
color = "grey", size=1.5)
}
ii=3
tab_ftnames_pc <- dplyr::filter(tab_ftnames, PC==ii)
topfeat_pc <- tab_ftnames_pc$sequence
prop_all <- (count_all)/rowSums(count_all)
if (ii==2){
feat_mat_pc <- prop_all[meta_all$genotype!="WT",topfeat_pc]
meta_pc <- meta_all[meta_all$genotype!="WT",]
}
if (ii==3){
feat_mat_pc <- prop_all[,topfeat_pc]
meta_pc <- meta_all
}
nfeat <- ncol(feat_mat_pc)
tab_topfeat <- data.frame(RA=as.vector(as.matrix(feat_mat_pc)),
feature=rep(tab_ftnames_pc$shortname, each=nrow(feat_mat_pc)),
time=rep(meta_pc$week, nfeat),
group=rep(meta_pc[,ifelse(ii==2, "group", "genotype")], nfeat),
hostID=rep(meta_pc$hostID, nfeat))
p_topfeat <- ggplot(data=tab_topfeat) +
geom_point(aes(x=time, y=RA, color=group), size=0.8) +
facet_wrap(vars(feature), nrow=3) +
theme_bw() +
labs(x="Week", y="Relative Abundance", color=ifelse(ii==2, "Outcome", "Genotype")) +
ggtitle(paste0("Top Features Identified by PC", ii)) + theme(legend.position="bottom")
print(p_topfeat)
if (ii==2){
p_topfeat <- p_topfeat + geom_vline(xintercept = 35, linetype="dashed",
color = "grey", size=1.5)
}
shortname
tab_ftnames_pc <- dplyr::filter(tab_ftnames, PC==ii)
topfeat_pc <- tab_ftnames_pc$sequence
prop_all <- (count_all)/rowSums(count_all)
if (ii==2){
feat_mat_pc <- prop_all[meta_all$genotype!="WT",topfeat_pc]
meta_pc <- meta_all[meta_all$genotype!="WT",]
}
if (ii==3){
feat_mat_pc <- prop_all[,topfeat_pc]
meta_pc <- meta_all
}
nfeat <- ncol(feat_mat_pc)
tab_topfeat <- data.frame(RA=as.vector(as.matrix(feat_mat_pc)),
feature=rep(tab_ftnames_pc$shortname, each=nrow(feat_mat_pc)),
time=rep(meta_pc$week, nfeat),
group=rep(meta_pc[,ifelse(ii==2, "group", "genotype")], nfeat),
hostID=rep(meta_pc$hostID, nfeat))
p_topfeat <- ggplot(data=tab_topfeat) +
geom_point(aes(x=time, y=RA, color=group), size=0.8) +
facet_wrap(vars(feature), scale="free_y", nrow=4) +
theme_bw() +
labs(x="Week", y="Relative Abundance", color=ifelse(ii==2, "Outcome", "Genotype")) +
ggtitle(paste0("Top Features Identified by PC", ii)) + theme(legend.position="bottom")
print(p_topfeat)
if (ii==2){
p_topfeat <- p_topfeat + geom_vline(xintercept = 35, linetype="dashed",
color = "grey", size=1.5)
}
ii
ii=1
match(shortname[ii], shortname[1:(ii-1)]
)
ii=3
match(shortname[ii], shortname[1:(ii-1)]
)
for (ii in 2:length(shortname)){
if (!is.na(match(shortname[ii], shortname[1:(ii-1)]))) {
shortname[ii] <- paste0(shortname[ii], 2)
}
}
duplicate(shortname)
duplicated(shortname)
shortname <- tab_taxsplit[, "Species"]
for (j in colnames(tab_taxsplit)[6:1]){
shortname[nchar(shortname)<=3] <- tab_taxsplit[nchar(shortname)<=3, j]
}
ind <- 1
while(duplicated(shortname)){
ind <- ind+1
for (ii in 2:length(shortname)){
if (!is.na(match(shortname[ii], shortname[1:(ii-1)]))) {
shortname[ii] <- paste0(shortname[ii], ind)
}
}
}
duplicated(shortname)
all(duplicated(shortname))
any(duplicated(shortname))
ind <- 1
while(any(duplicated(shortname))){
ind <- ind+1
for (ii in 2:length(shortname)){
if (!is.na(match(shortname[ii], shortname[1:(ii-1)]))) {
shortname[ii] <- paste0(shortname[ii], ind)
}
}
}
shortname
shortname <- tab_taxsplit[, "Species"]
for (j in colnames(tab_taxsplit)[6:1]){
shortname[nchar(shortname)<=3] <- tab_taxsplit[nchar(shortname)<=3, j]
}
ind <- 1
while(any(duplicated(shortname))){
ind <- ind+1
for (ii in 2:length(shortname)){
if (!is.na(match(shortname[ii], shortname[1:(ii-1)]))) {
shortname[ii] <- paste0(shortname[ii], ind)
break
}
}
}
shortname
shortname <- tab_taxsplit[, "Species"]
for (j in colnames(tab_taxsplit)[6:1]){
shortname[nchar(shortname)<=3] <- tab_taxsplit[nchar(shortname)<=3, j]
}
for (ii in 1:(length(shortname)-1)){
ind <- match(shortname[ii], shortname)
if (length(ind)>1) {
shortname[ind[-1]] <- paste(shortname[ind[-1]], 1:length(ind[-1]))
}
}
shortname
duplicated(shortname)
ind
shortname <- tab_taxsplit[, "Species"]
for (j in colnames(tab_taxsplit)[6:1]){
shortname[nchar(shortname)<=3] <- tab_taxsplit[nchar(shortname)<=3, j]
}
shortname <- tab_taxsplit[, "Species"]
for (j in colnames(tab_taxsplit)[6:1]){
shortname[nchar(shortname)<=3] <- tab_taxsplit[nchar(shortname)<=3, j]
}
for (ii in 1:(length(shortname)-1)){
ind <- match(shortname[ii], shortname)
if (length(ind)>1) {
shortname[ind[-1]] <- paste(shortname[ind[-1]], 1:length(ind[-1]))
}
}
shortname
ii
ii=28
ind <- match(shortname[ii], shortname)
ind
ind <- grep(shortname[ii], shortname)
ind
for (ii in 1:(length(shortname)-1)){
ind <- grep(shortname[ii], shortname)
if (length(ind)>1) {
shortname[ind[-1]] <- paste(shortname[ind[-1]], 1:length(ind[-1]))
}
}
shortname
shortname <- tab_taxsplit[, "Species"]
for (j in colnames(tab_taxsplit)[6:1]){
shortname[nchar(shortname)<=3] <- tab_taxsplit[nchar(shortname)<=3, j]
}
for (ii in 1:(length(shortname)-1)){
ind <- grep(shortname[ii], shortname)
if (length(ind)>1) {
shortname[ind[-1]] <- paste0(shortname[ind[-1]], "_", 1:length(ind[-1]))
}
}
shortname
tab_ftnames$shortname <- shortname
ii=2
tab_ftnames_pc <- dplyr::filter(tab_ftnames, PC==ii)
topfeat_pc <- tab_ftnames_pc$sequence
prop_all <- (count_all)/rowSums(count_all)
if (ii==2){
feat_mat_pc <- prop_all[meta_all$genotype!="WT",topfeat_pc]
meta_pc <- meta_all[meta_all$genotype!="WT",]
}
if (ii==3){
feat_mat_pc <- prop_all[,topfeat_pc]
meta_pc <- meta_all
}
nfeat <- ncol(feat_mat_pc)
tab_topfeat <- data.frame(RA=as.vector(as.matrix(feat_mat_pc)),
feature=rep(tab_ftnames_pc$shortname, each=nrow(feat_mat_pc)),
time=rep(meta_pc$week, nfeat),
group=rep(meta_pc[,ifelse(ii==2, "group", "genotype")], nfeat),
hostID=rep(meta_pc$hostID, nfeat))
p_topfeat <- ggplot(data=tab_topfeat) +
geom_point(aes(x=time, y=RA, color=group), size=0.8) +
facet_wrap(vars(feature), scale="free_y", nrow=4) +
theme_bw() +
labs(x="Week", y="Relative Abundance", color=ifelse(ii==2, "Outcome", "Genotype")) +
ggtitle(paste0("Top Features Identified by PC", ii)) + theme(legend.position="bottom")
print(p_topfeat)
if (ii==2){
p_topfeat <- p_topfeat + geom_vline(xintercept = 35, linetype="dashed",
color = "grey", size=1.5)
}
p_topfeat + geom_vline(xintercept = 35, linetype="dashed",
color = "grey", size=1.5)
ii
p_topfeat + geom_vline(xintercept = 35, linetype="dashed",
color = "grey", size=1)
p_topfeat + geom_vline(xintercept = 35, linetype="dashed",
color = "grey", size=1)+
coord_trans(y="sqrt")
ii
tab_ftnames_pc <- dplyr::filter(tab_ftnames, PC==ii)
topfeat_pc <- tab_ftnames_pc$sequence
prop_all <- (count_all)/rowSums(count_all)
if (ii==2){
feat_mat_pc <- prop_all[meta_all$genotype!="WT",topfeat_pc]
meta_pc <- meta_all[meta_all$genotype!="WT",]
}
if (ii==3){
feat_mat_pc <- prop_all[,topfeat_pc]
meta_pc <- meta_all
}
nfeat <- ncol(feat_mat_pc)
tab_topfeat <- data.frame(RA=as.vector(as.matrix(feat_mat_pc)),
feature=rep(tab_ftnames_pc$shortname, each=nrow(feat_mat_pc)),
time=rep(meta_pc$week, nfeat),
group=rep(meta_pc[,ifelse(ii==2, "group", "genotype")], nfeat),
hostID=rep(meta_pc$hostID, nfeat))
p_topfeat <- ggplot(data=tab_topfeat) +
geom_point(aes(x=time, y=RA, color=group), size=0.8) +
facet_wrap(vars(feature), nrow=4) +
theme_bw() +
labs(x="Week", y="Relative Abundance", color=ifelse(ii==2, "Outcome", "Genotype")) +
ggtitle(paste0("Top Features Identified by PC", ii)) + theme(legend.position="bottom") +
coord_trans(y="sqrt")
if (ii==2){
p_topfeat <- p_topfeat + geom_vline(xintercept = 35, linetype="dashed",
color = "grey", size=1)
}
print(p_topfeat)
ii=3
tab_ftnames_pc <- dplyr::filter(tab_ftnames, PC==ii)
topfeat_pc <- tab_ftnames_pc$sequence
prop_all <- (count_all)/rowSums(count_all)
if (ii==2){
feat_mat_pc <- prop_all[meta_all$genotype!="WT",topfeat_pc]
meta_pc <- meta_all[meta_all$genotype!="WT",]
}
if (ii==3){
feat_mat_pc <- prop_all[,topfeat_pc]
meta_pc <- meta_all
}
nfeat <- ncol(feat_mat_pc)
tab_topfeat <- data.frame(RA=as.vector(as.matrix(feat_mat_pc)),
feature=rep(tab_ftnames_pc$shortname, each=nrow(feat_mat_pc)),
time=rep(meta_pc$week, nfeat),
group=rep(meta_pc[,ifelse(ii==2, "group", "genotype")], nfeat),
hostID=rep(meta_pc$hostID, nfeat))
p_topfeat <- ggplot(data=tab_topfeat) +
geom_point(aes(x=time, y=RA, color=group), size=0.8) +
facet_wrap(vars(feature), nrow=4) +
theme_bw() +
labs(x="Week", y="Relative Abundance", color=ifelse(ii==2, "Outcome", "Genotype")) +
ggtitle(paste0("Top Features Identified by PC", ii)) + theme(legend.position="bottom") +
coord_trans(y="sqrt")
if (ii==2){
p_topfeat <- p_topfeat + geom_vline(xintercept = 35, linetype="dashed",
color = "grey", size=1)
}
print(p_topfeat)
40*190
40*190
40.85+26.88
24.96+48.38
10000/7
10000/6.98
1433+67.73+73.34+3500
1433+67.73+73.34+3500-7600
library(vegan)
y <- matrix(rnorm(40), 10,4)
D <- vegdist(y, type="euclidean")
D <- vegdist(y, type="Euclidean")
?vegdist
D <- vegdist(y, method="euclidean")
x <- cbind(c(rep(1,10), rep(0,20)), c(rep(0,20), rep(1,10))
)
x
J <- diag(20)-matrix(1,20,20)/20
range(J%*%J-J)
J%*%x
J <- diag(30)-matrix(1,30,30)/30
J%*%x[,1]
J%*%x
X <- J%*%x
H <- X%*%solve(t(X)%*%X)%*%t(X)
adnois(D~x)
adonis(D~x)
adonis2(D~x)
x0 <- rep(c('a','b','c', each=10))
x0
x0 <- rep(c('a','b','c'), each=10)
x0
adonis2(D~x0)
dim(D)
D <- as.matrix(D)
adonis2(D~x0)
dim(D)
y <- matrix(rnorm(3*40), 30,4)
D <- vegdist(y, type="euclidean")
D <- vegdist(y, method="euclidean")
adonis2(D~x0)
tr(H%*%J%*%D%*%J)
tr <- function(x){sum(diag(x))}
tr(H%*%J%*%D%*%J)
dim(H%*%J%*%D%*%J)
dim(H)
dim(D)
D<- as.matrix(D)
dim(H%*%J%*%D%*%J)
tr(H%*%J%*%D%*%J)
tr(-H%*%J%*%D%*%J/2)
tr(-H%*%J%*%(D*D)%*%J/2)
adonis2(D~x[,1]+x[,2])
X <- J%*%x[,1]
H <- X%*%solve(t(X)%*%X)%*%t(X)
tr(-H%*%J%*%(D*D)%*%J/2)
?capscale
x[,1] <- runif(30)
X <- J%*%x[,1]
H <- X%*%solve(t(X)%*%X)%*%t(X)
tr(-H%*%J%*%(D*D)%*%J/2)
adonis2(D~x[,1]+x[,2])
X <- x[,1]
H <- X%*%solve(t(X)%*%X)%*%t(X)
tr(-H%*%J%*%(D*D)%*%J/2)
22046/6.98
25679/7
90/12
