labs(y="Host ID", x="Age by Month", color="M. catarrhalis", fill="M. catarrhalis") +
theme_bw() +
theme(axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
legend.position="bottom",
panel.grid = element_blank()) +
scale_x_continuous(limits = c(-0.5, 12.5), breaks = seq(0, 12, 2))
p_timeline_sa <- ggplot(data=metadata,
aes(x=month, y=study_id, color=inf_multi_sa, fill=inf_multi_sa)) +
geom_tile() +
labs(y="Host ID", x="Age by Month", color="S. aureus", fill="S. aureus") +
theme_bw() +
theme(axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
legend.position="bottom",
panel.grid = element_blank()) +
scale_x_continuous(limits = c(-0.5, 12.5), breaks = seq(0, 12, 2))
p_timeline_sp <- ggplot(data=metadata,
aes(x=month, y=study_id, color=inf_multi_sp, fill=inf_multi_sp)) +
geom_tile() +
labs(y="Host ID", x="Age by Month", color="S. pneumoniae", fill="S. pneumoniae") +
theme_bw() +
theme(axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
legend.position="bottom",
panel.grid = element_blank()) +
scale_x_continuous(limits = c(-0.5, 12.5), breaks = seq(0, 12, 2))
p_timeline <- grid.arrange(p_timeline_hi, p_timeline_mc,
p_timeline_sa, p_timeline_sp,
nrow=2)
print(p_timeline)
ggplot(data=metadata,
aes(x=month, y=study_id, color=inf_rv_yn, fill=inf_rv_yn)) +
geom_tile() +
labs(y="Host ID", x="Age by Month", color="Respiratory syncytial virus", fill="Respiratory syncytial virus") +
theme_bw() +
theme(axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
legend.position="bottom",
panel.grid = element_blank()) +
scale_color_manual(colors=c("red", "blue")) +
scale_x_continuous(limits = c(-0.5, 12.5), breaks = seq(0, 12, 2))
ggplot(data=metadata,
aes(x=month, y=study_id, color=inf_rv_yn, fill=inf_rv_yn)) +
geom_tile() +
labs(y="Host ID", x="Age by Month", color="Respiratory syncytial virus", fill="Respiratory syncytial virus") +
theme_bw() +
theme(axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
legend.position="bottom",
panel.grid = element_blank()) +
scale_color_manual(c("red", "blue")) +
scale_x_continuous(limits = c(-0.5, 12.5), breaks = seq(0, 12, 2))
?scale_color_manual
ggplot(data=metadata,
aes(x=month, y=study_id, color=inf_rv_yn, fill=inf_rv_yn)) +
geom_tile() +
labs(y="Host ID", x="Age by Month", color="Respiratory syncytial virus", fill="Respiratory syncytial virus") +
theme_bw() +
theme(axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
legend.position="bottom",
panel.grid = element_blank()) +
scale_color_manual(values=c("red", "blue")) +
scale_x_continuous(limits = c(-0.5, 12.5), breaks = seq(0, 12, 2))
ggplot(data=metadata,
aes(x=month, y=study_id, color=inf_rv_yn, fill=inf_rv_yn)) +
geom_tile() +
labs(y="Host ID", x="Age by Month", color="Respiratory syncytial virus", fill="Respiratory syncytial virus") +
theme_bw() +
theme(axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
legend.position="bottom",
panel.grid = element_blank()) +
scale_color_manual(values=c("red", "blue")) +
scale_fill_manual(values=c("red", "blue")) +
scale_x_continuous(limits = c(-0.5, 12.5), breaks = seq(0, 12, 2))
ggplot(data=metadata,
aes(x=month, y=study_id, color=inf_rv_yn, fill=inf_rv_yn)) +
geom_tile() +
labs(y="Host ID", x="Age by Month", color="Respiratory syncytial virus", fill="Respiratory syncytial virus") +
theme_bw() +
theme(axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
legend.position="bottom",
panel.grid = element_blank()) +
scale_color_manual(values=c("blue","red")) +
scale_fill_manual(values=c("blue","red")) +
scale_x_continuous(limits = c(-0.5, 12.5), breaks = seq(0, 12, 2))
146/50000
146/50000*12
rm(list=ls())
# for data
library(readr) # read tsv
library(qiime2R) # read in Qiime artifacts
library(dplyr) # data formatting
library(yaml) # for read_qza() in qiime2R
# for computing
library(reticulate) # run py codes
library(phyloseq) # phyloseq object
library(vegan) # distance matrix
library(PERMANOVA) # permanova
library(randomForest) # random forest
library(PRROC) # roc and pr
library(tempted)
library(microTensor)
# for plotting
library(ggpubr)
library(ggplot2)
library(gridExtra)
library(RColorBrewer)
library(plotly)
# set working directory to be where the current script is located
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
source('../TEMPTED.R')
col_group <- c(brewer.pal(6,'Set2')[6], brewer.pal(6,'Set1')[c(3,1)])
col_microbe <- c(brewer.pal(6,'Set1')[c(2,4)], brewer.pal(6,'Set2')[4])
npc <- 3 # number of components
bws <- 8 # for plotting
meta_all <- read.csv("data/metadata_cleaned.csv", row.names=1)
meta_all$group <- factor(meta_all$group, levels=
c("genotype=WT, disease=no",
"genotype=Pax5+/-, disease=no",
"genotype=Pax5+/-, disease=pB-ALL"))
levels(meta_all$group) <- c("healthy wild type", "predisposed, remained healthy", "predisposed, developed pB-ALL")
count_all <- read.csv("data/count_cleaned.csv", row.names=1)
dim(count_all)
load("data/distance_mat.Rdata")
metauni <- unique(meta_all[,c('hostID', 'genotype', 'diseased', 'group')])
metauni$group <- factor(metauni$group, sort(levels(metauni$group)))
rownames(metauni) <- metauni$hostID
table(metauni$group)
count_tab <- count_all[,colMeans(count_all==0)<=0.95]
meta_tab <- meta_all[,c("sample_name", "hostID", "week", "group", "genotype", "diseased")]
meta_tab$time_disc <- round(meta_tab$week)
tm <- sort(unique(meta_tab$time_disc))
metauni <- unique(meta_tab[,c("hostID", "group", "genotype", "diseased")])
rownames(metauni) <- metauni$hostID
X_array <- array(NA, dim = c(ncol(count_tab),
length(unique(meta_tab$hostID)),
length(tm)))
dimnames(X_array) <- list(colnames(count_tab),
unique(meta_tab$hostID),
tm)
for(k in 1:length(tm)) {
k_df_samples <- meta_tab %>%
dplyr::filter(time_disc == tm[k])
k_df_samples <- k_df_samples[!duplicated(k_df_samples$hostID),]
X_array[, k_df_samples$hostID, k] <-
t(count_tab[rownames(k_df_samples), ])
}
mean(is.na(X_array)) # check proportion of NAs
set.seed(1)
fit_microTensor <-
microTensor::microTensor(X = X_array[-1,,], R = npc,
nn_t = TRUE, ortho_m = TRUE,
weighted = TRUE)
micro_sub <- as.data.frame(fit_microTensor$s)
colnames(micro_sub) <- paste0("PC",1:npc)
micro_sub$hostID <- dimnames(X_array)[[2]]
micro_sub <- merge(metauni, micro_sub)
fit_microTensor$t
count_tab <- count_all[,colMeans(count_all==0)<=0.95]
meta_tab <- meta_all[,c("sample_name", "hostID", "week", "group", "genotype", "diseased")]
meta_tab$time_disc <- round(meta_tab$week)
tm <- sort(unique(meta_tab$time_disc))
metauni <- unique(meta_tab[,c("hostID", "group", "genotype", "diseased")])
rownames(metauni) <- metauni$hostID
X_array <- array(NA, dim = c(ncol(count_tab),
length(unique(meta_tab$hostID)),
length(tm)))
dimnames(X_array) <- list(colnames(count_tab),
unique(meta_tab$hostID),
tm)
for(k in 1:length(tm)) {
k_df_samples <- meta_tab %>%
dplyr::filter(time_disc == tm[k])
k_df_samples <- k_df_samples[!duplicated(k_df_samples$hostID),]
X_array[, k_df_samples$hostID, k] <-
t(count_tab[rownames(k_df_samples), ])
}
mean(is.na(X_array)) # check proportion of NAs
set.seed(1)
fit_microTensor <-
microTensor::microTensor(X = X_array[-1,,], R = npc,
nn_t = TRUE, ortho_m = TRUE,
weighted = TRUE)
micro_sub <- as.data.frame(fit_microTensor$s)
colnames(micro_sub) <- paste0("PC",1:npc)
micro_sub$hostID <- dimnames(X_array)[[2]]
micro_sub <- merge(metauni, micro_sub)
write.csv(micro_sub, file="result/subject_microtensor_leukemia.csv")
micro_time <- fit_microTensor$t
colnames(micro_time) <- paste0("PC",1:3)
write.csv(micro_time, file="result/time_microtensor_leukemia.csv")
micro_traj <- microTensor::create_loading(fit_decomp = fit_microTensor,
feature_names = dimnames(X_array)[[1]][-1],
subject_names = dimnames(X_array)[[2]],
time_names = tm,
class = "sample")
colnames(micro_traj) <- c("hostID", "time_disc", paste0("PC",1:npc))
micro_traj <- merge(meta_tab[,c("sample_name", "hostID", "time_disc", "group", "genotype", "diseased")], micro_traj)
write.csv(micro_traj, file="result/trajectory_microtensor_leukemia.csv")
dim(X_array)
head(dimnames(X_array)[[1]])
dim(count_tab)
micro_time <- read.csv("result/time_microtensor_leukemia.csv", header=T)
?plot_time_loading
plot_time_loading
length(tm)
tm
dim(micro_time)
micro_time <- fit_microTensor$t
colnames(micro_time) <- paste0("PC",1:3)
micro_time$time <- tm
write.csv(micro_time, file="result/time_microtensor_leukemia.csv")
tm
micro_time <- fit_microTensor$t
colnames(micro_time) <- paste0("PC",1:3)
dim(micro_time)
length(tm)
micro_time <- as.data.matrix(fit_microTensor$t)
colnames(micro_time) <- paste0("PC",1:3)
micro_time <- as.data.frame(fit_microTensor$t)
colnames(micro_time) <- paste0("PC",1:3)
micro_time$time <- tm
write.csv(micro_time, file="result/time_microtensor_leukemia.csv")
micro_time <- read.csv("result/time_microtensor_leukemia.csv", header=T)
tab_micro_time <- pivot_longer(micro_time,
cols = c(PC1, PC2, PC3),
names_to = "PC",
values_to = "value")
dim(tab_micro_time)
dim(micro_time)
micro_time <- read.csv("result/time_microtensor_leukemia.csv", header=T)
tab_micro_time <- pivot_longer(micro_time,
cols = c(PC1, PC2, PC3),
names_to = "PC",
values_to = "value")
ptime <- ggplot(data=tab_micro_time) +
geom_line(aes(x=time, y=value, color=PC)) +
labs(x="Study Day", y="Time Loading", color="Component")
ptime
plot_time_loading()
plot_time_loading
ggplot(data=tab_micro_time) +
geom_line(size=1.5, aes(x=time, y=value, color=PC)) +
scale_color_manual(values=col_microbe) +
labs(x="Study Day", y="Time Loading", color="Component") +
theme_bw() +
theme(legend.position='bottom')
ggplot(data=tab_micro_time) +
geom_line(linewidth=1.5, aes(x=time, y=value, color=PC)) +
scale_color_manual(values=col_microbe) +
labs(x="Study Day", y="Time Loading", color="Component") +
theme_bw() +
theme(legend.position='bottom')
micro_time <- read.csv("result/time_microtensor_leukemia.csv", header=T)
tab_micro_time <- pivot_longer(micro_time,
cols = c(PC1, PC2, PC3),
names_to = "PC",
values_to = "value")
p_time_micro <- ggplot(data=tab_micro_time) +
geom_line(linewidth=1.5, aes(x=time, y=value, color=PC)) +
scale_color_manual(values=col_microbe) +
labs(x="Study Day", y="Time Loading", color="Component") +
theme_bw() +
theme(legend.position='bottom')
print(p_time_micro)
micro_traj <- read.csv(file="result/trajectory_microtensor_leukemia.csv", header=T, row.names=1)
colnames(micro_traj)[7:9] <- paste("Component", 1:3)
p_traj_micro <- plot_feature_summary(micro_traj[,c("Component 1","Component 2","Component 3")],
micro_traj$time_disc,
micro_traj$group,
bws=bws) +
xlab('Week') + theme_bw() +
theme(legend.position='bottom') +
scale_color_manual(values=col_group) +
scale_fill_manual(values=col_group)
p_traj_micro
micro_sub <- read.csv(file="result/subject_microtensor_leukemia.csv", row.names=1, header=T)
p_sub_micro <- plot_ly(micro_sub, x=~PC1, y=~PC2, z=~PC3,
color=~group, colors=col_group)
p_sub_micro <- p_sub_micro %>% add_markers(marker=list(size=5))
p_sub_micro <- p_sub_micro %>% layout(scene=list(xaxis=list(title="Component 1", titlefont = list(size = 20)),
yaxis=list(title="Component 2", titlefont = list(size = 20)),
zaxis=list(title="Component 3", titlefont = list(size = 20))),
legend = list(font = list(size = 20), orientation = "h"))
p_sub_micro
htmlwidgets::saveWidget(widget=p_sub_micro,
file="../figure_table/leukemia_sub_microtensor.html",
selfcontained=F)
p_sub12_micro <- micro_sub %>% ggplot() +
geom_point(aes(x=PC1, y=PC2, color=group)) +
scale_color_manual(values=col_group) +
theme_bw() +
theme(legend.position="bottom")
p_sub13_micro <- micro_sub %>% ggplot() +
geom_point(aes(x=PC1, y=PC3, color=group)) +
scale_color_manual(values=col_group) +
theme_bw() +
theme(legend.position='bottom')
p_sub23_micro <- micro_sub %>% ggplot() +
geom_point(aes(x=PC2, y=PC3, color=group)) +
scale_color_manual(values=col_group) +
theme_bw() +
theme(legend.position='bottom')
g_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)}
mylegend <- g_legend(p_sub12_micro)
lay <- rbind(c(1,2,3),
c(4,4,4),
c(5,6,6))
lgd1 <- get_legend(p_time_micro)
lgd2 <- get_legend(p_sub23_micro)
p_tempted <- grid.arrange(
p_time_micro+theme(legend.position="none"),
p_sub12_micro+theme(legend.position="none"),
p_sub23_micro+theme(legend.position="none"),
p_traj_micro+theme(legend.position="none"),
lgd1, lgd2,
layout_matrix=lay)
lay <- rbind(c(1,2,3),c(1,2,3),c(1,2,3),c(1,2,3),c(1,2,3),
c(4,4,4),c(4,4,4),c(4,4,4),c(4,4,4),c(4,4,4),
c(5,6,6))
lgd1 <- get_legend(p_time_micro)
lgd2 <- get_legend(p_sub23_micro)
p_tempted <- grid.arrange(
p_time_micro+theme(legend.position="none"),
p_sub12_micro+theme(legend.position="none"),
p_sub23_micro+theme(legend.position="none"),
p_traj_micro+theme(legend.position="none"),
lgd1, lgd2,
layout_matrix=lay)
lay <- rbind(c(1,2,3),c(1,2,3),c(1,2,3),c(1,2,3),c(1,2,3),
c(4,4,4),c(4,4,4),c(4,4,4),c(4,4,4),c(4,4,4),
c(5,5,5))
lgd1 <- get_legend(p_time_micro)
lgd2 <- get_legend(p_sub23_micro)
p_tempted <- grid.arrange(
p_time_micro,
p_sub12_micro+theme(legend.position="none"),
p_sub23_micro+theme(legend.position="none"),
p_traj_micro+theme(legend.position="none"),
lgd2,
layout_matrix=lay)
lay <- rbind(c(1,2,3),c(1,2,3),c(1,2,3),c(1,2,3),c(1,2,3),
c(4,4,4),c(4,4,4),c(4,4,4),c(4,4,4),c(4,4,4),
c(5,5,5),
c(6,6,6))
lgd1 <- get_legend(p_time_micro)
lgd2 <- get_legend(p_sub23_micro)
p_tempted <- grid.arrange(
p_time_micro+theme(legend.position="none"),
p_sub12_micro+theme(legend.position="none"),
p_sub23_micro+theme(legend.position="none"),
p_traj_micro+theme(legend.position="none"),
lgd1, lgd2,
layout_matrix=lay)
ctf_sub <- read_qza("result/subject-biplot_leukemia.qza")$data$Vectors
ctf_sub$group <- metauni[ctf_sub$SampleID, "group"]
p_sub_ctf <- plot_ly(ctf_sub, x=~`PC1`, y=~`PC2`, z=~`PC3`,
color=~group, colors=col_group)
p_sub_ctf <- p_sub_ctf %>% add_markers(marker=list(size=5))
p_sub_ctf <- p_sub_ctf %>% layout(scene=list(xaxis=list(title="Component 1", titlefont = list(size = 20)),
yaxis=list(title="Component 2", titlefont = list(size = 20)),
zaxis=list(title="Component 3", titlefont = list(size = 20))),
legend = list(font = list(size = 20), orientation = "h"))
p_sub_ctf
htmlwidgets::saveWidget(widget=p_sub_ctf,
file="../figure_table/leukemia_sub_ctf.html",
selfcontained=F)
p_sub12_ctf <- ctf_sub %>% ggplot() +
geom_point(aes(x=PC1, y=PC2, color=group)) +
scale_color_manual(values=col_group) +
theme_bw() +
theme(legend.position="bottom")
p_sub13_ctf <- ctf_sub %>% ggplot() +
geom_point(aes(x=PC1, y=PC3, color=group)) +
scale_color_manual(values=col_group) +
theme_bw() +
theme(legend.position='bottom')
p_sub23_ctf <- ctf_sub %>% ggplot() +
geom_point(aes(x=PC2, y=PC3, color=group)) +
scale_color_manual(values=col_group) +
theme_bw() +
theme(legend.position='bottom')
g_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)}
mylegend <- g_legend(p_sub12_ctf)
# function to read in trajectories
read_traj <- function(file){
tmp <- tempdir()
rm <- TRUE
unzip(file, exdir=tmp)
unpacked<-unzip(file, exdir=tmp, list=TRUE)
artifact<-read_yaml(paste0(tmp,"/", paste0(gsub("/..+","", unpacked$Name[1]),"/metadata.yaml")))
artifact$contents<-data.frame(files=unpacked)
artifact$contents$size=sapply(paste0(tmp, "/", artifact$contents$files), file.size)
artifact$version=read.table(paste0(tmp,"/",artifact$uuid, "/VERSION"))
artifact$data <- read_tsv(paste0(tmp,"/",artifact$uuid,"/data/trajectory.tsv"))
return(artifact)
}
ctf_traj <- as.data.frame(read_traj("result/state-subject-ordination_leukemia.qza")$data)
ctf_traj$group <- meta_all[ctf_traj$`#SampleID`, "group"]
colnames(ctf_traj)[2:4] <- paste("Component", 1:3)
p_traj_ctf <- plot_feature_summary(ctf_traj[,c("Component 1","Component 2")],
ctf_traj$week_int,
ctf_traj$group,
bws=bws) +
xlab('Week') + theme_bw() +
theme(legend.position='bottom') +
scale_color_manual(values=col_group) +
scale_fill_manual(values=col_group)
p_traj_ctf
p_traj_ctf
# function to read in trajectories
read_traj <- function(file){
tmp <- tempdir()
rm <- TRUE
unzip(file, exdir=tmp)
unpacked<-unzip(file, exdir=tmp, list=TRUE)
artifact<-read_yaml(paste0(tmp,"/", paste0(gsub("/..+","", unpacked$Name[1]),"/metadata.yaml")))
artifact$contents<-data.frame(files=unpacked)
artifact$contents$size=sapply(paste0(tmp, "/", artifact$contents$files), file.size)
artifact$version=read.table(paste0(tmp,"/",artifact$uuid, "/VERSION"))
artifact$data <- read_tsv(paste0(tmp,"/",artifact$uuid,"/data/trajectory.tsv"))
return(artifact)
}
ctf_traj <- as.data.frame(read_traj("result/state-subject-ordination_leukemia.qza")$data)
ctf_traj$group <- meta_all[ctf_traj$`#SampleID`, "group"]
colnames(ctf_traj)[2:4] <- paste("Component", 1:3)
p_traj_ctf <- plot_feature_summary(ctf_traj[,c("Component 1","Component 2","Component 3")],
ctf_traj$week_int,
ctf_traj$group,
bws=bws) +
xlab('Week') + theme_bw() +
theme(legend.position='bottom') +
scale_color_manual(values=col_group) +
scale_fill_manual(values=col_group)
p_traj_ctf
ctf_time <- read_qza("result/state-biplot_leukemia.qza")$data$Vectors
colnames(ctf_time)[1] <- "week_int"
tab_time <- data.frame(time=ctf_time$week_int, value=as.vector(as.matrix(ctf_time[,2:4])),
component=as.factor(as.vector(t(matrix(rep(1:3,nrow(ctf_time)),3,)))))
p_time_ctf <- tab_time %>% ggplot(aes(x=time, y=value, color=component)) +
geom_line(linewidth=1.5) +
scale_color_manual(values=col_microbe) +
labs(x='Week', y="Temporal Loading", color="Component") +
theme_bw() +
theme(legend.position='bottom')
p_time_ctf
mylegend2 <- g_legend(p_time_ctf)
lay <- rbind(c(1,2,3),c(1,2,3),c(1,2,3),c(1,2,3),c(1,2,3),
c(4,4,4),c(4,4,4),c(4,4,4),c(4,4,4),c(4,4,4),
c(5,5,5),
c(6,6,6))
lgd1 <- get_legend(p_time_ctf)
lgd2 <- get_legend(p_sub23_ctf)
p_ctf_all <- grid.arrange(
p_time_ctf+theme(legend.position="none"),
p_sub12_ctf+theme(legend.position="none"),
p_sub23_ctf+theme(legend.position="none"),
p_traj_ctf+theme(legend.position="none"),
lgd1, lgd2,
layout_matrix=lay)
micro_time <- read.csv("result/time_microtensor_leukemia.csv", header=T)
tab_micro_time <- pivot_longer(micro_time,
cols = c(PC1, PC2, PC3),
names_to = "PC",
values_to = "value")
p_time_micro <- ggplot(data=tab_micro_time) +
geom_line(linewidth=1.5, aes(x=time, y=value, color=PC)) +
scale_color_manual(values=col_microbe) +
labs(x="Study Day", y="Time Loading", color="Component") +
theme_bw() +
theme(legend.position='bottom')
print(p_time_micro)
lay <- rbind(c(1,2,3),c(1,2,3),c(1,2,3),c(1,2,3),c(1,2,3),
c(4,4,4),c(4,4,4),c(4,4,4),c(4,4,4),c(4,4,4),
c(5,5,5),
c(6,6,6))
lgd1 <- get_legend(p_time_micro)
lgd2 <- get_legend(p_sub23_micro)
p_micro_all <- grid.arrange(
p_time_micro+theme(legend.position="none"),
p_sub12_micro+theme(legend.position="none"),
p_sub23_micro+theme(legend.position="none"),
p_traj_micro+theme(legend.position="none"),
lgd1, lgd2,
layout_matrix=lay)
lay <- rbind(c(1,2,3),c(1,2,3),c(1,2,3),c(1,2,3),c(1,2,3),
c(4,4,4),c(4,4,4),c(4,4,4),c(4,4,4),c(4,4,4),
c(5,5,5),
c(6,6,6))
lgd1 <- get_legend(p_time_ctf)
lgd2 <- get_legend(p_sub23_ctf)
p_ctf_all <- grid.arrange(
p_time_ctf+theme(legend.position="none"),
p_sub12_ctf+theme(legend.position="none"),
p_sub23_ctf+theme(legend.position="none"),
p_traj_ctf+theme(legend.position="none"),
lgd1, lgd2,
layout_matrix=lay)
dim(micro_traj)
colnames(micro_traj)
