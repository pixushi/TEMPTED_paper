res_perm <- adonis2(dist_sub ~ meta_sub$delivery)
Fmodel[ii,ss,jj] <- res_perm$F[1]
}
}
for (ii in 1:length(metric_name)){
write.csv(Fmodel[ii,,],
file=paste0('result/realsim_ecam_Fvalue_PCoA_', metric_name[ii], '.csv'))
}
}
method  <- c("tempted_clr", "ctf", "tcam")
measure <- c("roc", "pr")
classify <- c("glm", "rf")
tab_auc_subj <- NULL
for (ms in measure){
for (cls in classify){
# in sample
for (mthd in method){
fname <- paste0("result/realsim_ecam_", ms, "_sub_", cls, "_", mthd, ".csv")
tab0 <- read.csv(fname, row.names=1)
tab0 <- 1-as.matrix(tab0)
tab_tmp <- data.frame(auc=as.vector(tab0),
nsample=as.vector(t(matrix(rep(nkeep,nsim),length(nkeep),nsim))),
method=toupper(mthd), measure=toupper(ms), classify=cls,
type="In-Sample")
tab_auc_subj <- rbind(tab_auc_subj, tab_tmp)
}
# out of sample
fname <- paste0("result/realsim_ecam_", ms, "_oos_", cls, "_tempted.csv")
tab0 <- read.csv(fname, row.names=1)
tab0 <- 1-as.matrix(tab0)
tab_tmp <- data.frame(auc=as.vector(tab0),
nsample=as.vector(t(matrix(rep(nkeep,nsim),length(nkeep),nsim))),
method="TEMPTED", measure=toupper(ms), classify=cls,
type="Out-of-Sample")
tab_auc_subj <- rbind(tab_auc_subj, tab_tmp)
}
}
tab_auc_subj$classify <- gsub("glm", "Logistic Regression", tab_auc_subj$classify)
tab_auc_subj$classify <- gsub("rf", "Random Forest", tab_auc_subj$classify)
tab_auc_subj$method <- gsub("TEMPTED_CLR", "TEMPTED", tab_auc_subj$method)
tab_auc_subj$nsample <- as.factor(tab_auc_subj$nsample)
tab1 <- aggregate(auc~nsample+measure+method+classify+type, data=tab_auc_subj,
FUN=mean)
names(tab1)[6] <- 'mean'
tab2 <- aggregate(auc~nsample+measure+method+classify+type, data=tab_auc_subj,
FUN=function(x){sd(x)/sqrt(length(x))})
names(tab2)[6] <- 'se'
rownames(tab1) <-rownames(tab2) <- NULL
tab_auc_subj_summary <- merge(tab1, tab2)
tab_auc_subj_summary$nsample <- factor(tab_auc_subj_summary$nsample,
level=as.character(nkeep))
ann_text <- tab_auc_subj_summary[2,]
ann_text$mean <- 0.515
ann_text$nsample <- 7
color_method <- c('#33a02c', #green for CTF
'#f525dd', #pink for TCAM
'#377eb8') #blue for TEMPTED
p_subj_roc <- ggplot(data=dplyr::filter(tab_auc_subj_summary, measure=="ROC"),
aes(x=nsample, y=mean, group=paste0(type,method), color=method)) +
geom_line(size=1, position=position_dodge(0.5), aes(linetype=type)) +
geom_point(size=2, position=position_dodge(0.5)) +
geom_errorbar(aes(ymin=mean-2*se, ymax=mean+2*se, width=0.5),
position=position_dodge(0.5), size=1) +
geom_hline(yintercept=0.5, linetype="dotted", color = "black", size=1) +
geom_text(data = ann_text,label = "At random", color="black") +
facet_wrap(.~classify) +
labs(y='AUC-ROC error', x='Number of time points') +
ggtitle("Subject Level") +
scale_color_manual(values=color_method) +
theme_bw()
p_subj_roc
p_subj_pr <- ggplot(data=dplyr::filter(tab_auc_subj_summary, measure=="PR"),
aes(x=nsample, y=mean, group=paste0(type,method), color=method)) +
geom_line(size=1, position=position_dodge(0.5), aes(linetype=type)) +
geom_point(size=2, position=position_dodge(0.5)) +
geom_errorbar(aes(ymin=mean-2*se, ymax=mean+2*se, width=0.5),
position=position_dodge(0.5), size=1) +
geom_hline(yintercept=0.5, linetype="dotted", color = "black", size=1) +
geom_text(data = ann_text,label = "At random", color="black") +
facet_wrap(.~classify) +
labs(y='AUC-PR Error', x='Number of Time Points')+
ggtitle("Subject Level") +
scale_color_manual(values=color_method) +
theme_bw()
p_subj_pr
p_subj_pr
metric_name <- c("Bray-Curtis",
"unweighted_UniFrac", "Weighted_UniFrac")
# read in results
Fmodel <- array(0, dim=c(length(metric_name)+2, nsim, length(nkeep)),
dimnames=list(c(metric_name, "TEMPTED", "CTF"), paste0('sim',1:nsim), paste0('nsample=',nkeep)))
for (ii in 1:length(metric_name)){
Fmodel[ii,,] <- as.matrix(read.csv(paste0('result/realsim_ecam_Fvalue_PCoA_', metric_name[ii], '.csv'),
row.names=1))
}
Fmodel_tempted <- read.csv("result/realsim_ecam_Fvalue_tempted_clr.csv", row.names=1)
Fmodel[ii+1,,] <- as.matrix(Fmodel_tempted)
Fmodel_ctf <- read.csv("result/realsim_ecam_Fvalue_ctf.csv", row.names=1)
Fmodel[ii+2,,] <- as.matrix(Fmodel_ctf)
# make table
tab_Fmodel <- NULL
for (ii in 1:dim(Fmodel)[1]){
tab_tmp <- data.frame(Fvalue=as.vector(Fmodel[ii,,]),
nsample=as.vector(t(matrix(rep(nkeep,nsim),length(nkeep),nsim))),
method=dimnames(Fmodel)[[1]][ii])
tab_Fmodel <- rbind(tab_Fmodel, tab_tmp)
}
tab_Fmodel$method[tab_Fmodel$method=="unweighted_UniFrac"] <- "UniFrac"
tab_Fmodel$method[tab_Fmodel$method=="Weighted_UniFrac"] <- "Weighted UniFrac"
tab1 <- aggregate(Fvalue~nsample+method, data=tab_Fmodel,
FUN=mean)
names(tab1)[3] <- 'mean'
tab2 <- aggregate(Fvalue~nsample+method, data=tab_Fmodel,
FUN=function(x){sd(x)/sqrt(length(x))})
names(tab2)[3] <- 'se'
rownames(tab1) <-rownames(tab2) <- NULL
tab_Fmodel_summary <- merge(tab1, tab2)
color_method <- c('#ff7f00', #orange for Bray
'#33a02c', #green for CTF
'#377eb8', #blue for TEMPTED
'#6a3d9a', #purple for Unifrac
'#e31a1c') #red for unweighted Unifrac
p_Fmodel_summary <- ggplot(data=tab_Fmodel_summary,
aes(x=nsample, y=mean, group=method, color=method)) +
geom_line(size=1, position=position_dodge(0.1)) + geom_point(size=2, position=position_dodge(0.1)) +
geom_errorbar(aes(ymin=mean-2*se, ymax=mean+2*se, width=1),
position=position_dodge(0.1), size=1) +
scale_x_continuous(breaks=2:10) +
scale_color_manual(values=color_method) +
ylab('PERMANOVA F-value') + xlab('Number of Time Points') +
ggtitle("Sample Level") +
theme_bw() +
theme(legend.position = "bottom")
p_Fmodel_summary
metric_file <- list.files('data', pattern = "distance_matrix")
metric_file
metric_name <- c("Aitchison", "Bray-Curtis",
"gUniFrac-alpha0", "gUniFrac-alpha1", "gUniFrac-alpha5",
"Jaccard", "unweighted_UniFrac", "Weighted_UniFrac")
distmat_all <- vector(mode="list", length(metric_name))
names(distmat_all) <- metric_name
for (ii in 1:length(metric_name)){
tmp <- read_qza(paste0("data/", metric_file[ii]))$data
distmat_all[[ii]] <- as.matrix(tmp)
}
pr_glm_array <- roc_glm_array <-
pr_rf_array <- roc_rf_array <-
array(0, dim=c(length(metric_name), nsim, length(nkeep)),
dimnames=list(metric_name, paste0('sim',1:nsim), paste0('nsample=',nkeep)))
for (jj in 1:length(nkeep)){
print(jj)
for (ss in 1:nsim){
ind_sub <- sampleID[ss,jj][[1]]
meta_sub <- meta_tab[ind_sub,]
for (mm in 1:length(metric_name)){
pcoa_dist <- distmat_all[[mm]][ind_sub,ind_sub]
pcoa_mds <- as.data.frame(cmdscale(pcoa_dist, k=2))
colnames(pcoa_mds) <- c("PC1", "PC2")
pcoa_mds$delivery_ind <- meta_sub[rownames(pcoa_dist),]$delivery_ind
# glm
predprob_glm <- rep(NA, nrow(pcoa_mds))
for(ii in 1:nrow(pcoa_mds)){
glm_fit <- glm(delivery_ind~PC1+PC2, data=pcoa_mds[-ii,])
predprob_glm[ii] <- predict(glm_fit, newdata=pcoa_mds[ii,], type = "response")
}
roc_glm_array[mm,ss,jj] <- roc.curve(predprob_glm[pcoa_mds$delivery_ind],
predprob_glm[!pcoa_mds$delivery_ind])$auc
pr_glm_array[mm,ss,jj] <- pr.curve(predprob_glm[pcoa_mds$delivery_ind],
predprob_glm[!pcoa_mds$delivery_ind])$auc.integral
# random forest
rf_fit <- randomForest(as.factor(delivery_ind)~PC1+PC2, data=pcoa_mds)
predprob_rf <- predict(rf_fit, type = "prob")[,"TRUE"]
roc_rf_array[mm,ss,jj] <- roc.curve(predprob_rf[pcoa_mds$delivery_ind],
predprob_rf[!pcoa_mds$delivery_ind])$auc
pr_rf_array[mm,ss,jj] <- pr.curve(predprob_rf[pcoa_mds$delivery_ind],
predprob_rf[!pcoa_mds$delivery_ind])$auc.integral
}
}
for (mm in 1:length(metric_name)){
write.csv(roc_glm_array[mm,,],
file=paste0('result/realsim_ecam_roc_sample_glm_PCoA_', metric_name[mm], '.csv'))
write.csv(pr_glm_array[mm,,],
file=paste0('result/realsim_ecam_pr_sample_glm_PCoA_', metric_name[mm], '.csv'))
write.csv(roc_rf_array[mm,,],
file=paste0('result/realsim_ecam_roc_sample_rf_PCoA_', metric_name[mm], '.csv'))
write.csv(pr_rf_array[mm,,],
file=paste0('result/realsim_ecam_pr_sample_rf_PCoA_', metric_name[mm], '.csv'))
}
}
metric_file <- list.files('data', pattern = "distance_matrix")
metric_file
metric_name <- c("Aitchison", "Bray-Curtis",
"gUniFrac-alpha0", "gUniFrac-alpha1", "gUniFrac-alpha5",
"Jaccard", "unweighted_UniFrac", "Weighted_UniFrac")
distmat_all <- vector(mode="list", length(metric_name))
names(distmat_all) <- metric_name
for (ii in 1:length(metric_name)){
tmp <- read_qza(paste0("data/", metric_file[ii]))$data
distmat_all[[ii]] <- as.matrix(tmp)
}
pr_glm_array <- roc_glm_array <-
pr_rf_array <- roc_rf_array <-
array(0, dim=c(length(metric_name), nsim, length(nkeep)),
dimnames=list(metric_name, paste0('sim',1:nsim), paste0('nsample=',nkeep)))
for (jj in 1:length(nkeep)){
print(jj)
for (ss in 1:nsim){
meta_sub <- read.csv(paste0("simdata/realsim", ss, "_ntime", jj, ".csv"), header=T, row.names=1)
ind_sub <- rownames(meta_sub)
for (mm in 1:length(metric_name)){
pcoa_dist <- distmat_all[[mm]][ind_sub,ind_sub]
pcoa_mds <- as.data.frame(cmdscale(pcoa_dist, k=2))
colnames(pcoa_mds) <- c("PC1", "PC2")
pcoa_mds$delivery_ind <- meta_sub[rownames(pcoa_dist),]$delivery_ind
# glm
predprob_glm <- rep(NA, nrow(pcoa_mds))
for(ii in 1:nrow(pcoa_mds)){
glm_fit <- glm(delivery_ind~PC1+PC2, data=pcoa_mds[-ii,])
predprob_glm[ii] <- predict(glm_fit, newdata=pcoa_mds[ii,], type = "response")
}
roc_glm_array[mm,ss,jj] <- roc.curve(predprob_glm[pcoa_mds$delivery_ind],
predprob_glm[!pcoa_mds$delivery_ind])$auc
pr_glm_array[mm,ss,jj] <- pr.curve(predprob_glm[pcoa_mds$delivery_ind],
predprob_glm[!pcoa_mds$delivery_ind])$auc.integral
# random forest
rf_fit <- randomForest(as.factor(delivery_ind)~PC1+PC2, data=pcoa_mds)
predprob_rf <- predict(rf_fit, type = "prob")[,"TRUE"]
roc_rf_array[mm,ss,jj] <- roc.curve(predprob_rf[pcoa_mds$delivery_ind],
predprob_rf[!pcoa_mds$delivery_ind])$auc
pr_rf_array[mm,ss,jj] <- pr.curve(predprob_rf[pcoa_mds$delivery_ind],
predprob_rf[!pcoa_mds$delivery_ind])$auc.integral
}
}
for (mm in 1:length(metric_name)){
write.csv(roc_glm_array[mm,,],
file=paste0('result/realsim_ecam_roc_sample_glm_PCoA_', metric_name[mm], '.csv'))
write.csv(pr_glm_array[mm,,],
file=paste0('result/realsim_ecam_pr_sample_glm_PCoA_', metric_name[mm], '.csv'))
write.csv(roc_rf_array[mm,,],
file=paste0('result/realsim_ecam_roc_sample_rf_PCoA_', metric_name[mm], '.csv'))
write.csv(pr_rf_array[mm,,],
file=paste0('result/realsim_ecam_pr_sample_rf_PCoA_', metric_name[mm], '.csv'))
}
}
pr_glm_array <- roc_glm_array <-
pr_rf_array <- roc_rf_array <-
array(0, dim=c(length(metric_name), nsim, length(nkeep)),
dimnames=list(metric_name, paste0('sim',1:nsim), paste0('nsample=',nkeep)))
for (ss in 1:nsim){
print(ss)
for (jj in 1:length(nkeep)){
meta_sub <- read.csv(paste0("simdata/realsim", ss, "_ntime", jj, ".csv"), header=T, row.names=1)
ind_sub <- rownames(meta_sub)
meta_sub$delivery_ind <- meta_sub$delivery=="Vaginal"
meta_sub$studyid <- as.character(meta_sub$studyid)
for (mm in 1:length(metric_name)){
pcoa_dist <- distmat_all[[mm]][ind_sub,ind_sub]
pcoa_mds <- as.data.frame(cmdscale(pcoa_dist, k=2))
colnames(pcoa_mds) <- c("PC1", "PC2")
pcoa_mds$delivery_ind <- meta_sub[rownames(pcoa_dist),]$delivery_ind
# glm
predprob_glm <- rep(NA, nrow(pcoa_mds))
for(ii in 1:nrow(pcoa_mds)){
glm_fit <- glm(delivery_ind~PC1+PC2, data=pcoa_mds[-ii,])
predprob_glm[ii] <- predict(glm_fit, newdata=pcoa_mds[ii,], type = "response")
}
roc_glm_array[mm,ss,jj] <- roc.curve(predprob_glm[pcoa_mds$delivery_ind],
predprob_glm[!pcoa_mds$delivery_ind])$auc
pr_glm_array[mm,ss,jj] <- pr.curve(predprob_glm[pcoa_mds$delivery_ind],
predprob_glm[!pcoa_mds$delivery_ind])$auc.integral
# random forest
rf_fit <- randomForest(as.factor(delivery_ind)~PC1+PC2, data=pcoa_mds)
predprob_rf <- predict(rf_fit, type = "prob")[,"TRUE"]
roc_rf_array[mm,ss,jj] <- roc.curve(predprob_rf[pcoa_mds$delivery_ind],
predprob_rf[!pcoa_mds$delivery_ind])$auc
pr_rf_array[mm,ss,jj] <- pr.curve(predprob_rf[pcoa_mds$delivery_ind],
predprob_rf[!pcoa_mds$delivery_ind])$auc.integral
}
}
for (mm in 1:length(metric_name)){
write.csv(roc_glm_array[mm,,],
file=paste0('result/realsim_ecam_roc_sample_glm_PCoA_', metric_name[mm], '.csv'))
write.csv(pr_glm_array[mm,,],
file=paste0('result/realsim_ecam_pr_sample_glm_PCoA_', metric_name[mm], '.csv'))
write.csv(roc_rf_array[mm,,],
file=paste0('result/realsim_ecam_roc_sample_rf_PCoA_', metric_name[mm], '.csv'))
write.csv(pr_rf_array[mm,,],
file=paste0('result/realsim_ecam_pr_sample_rf_PCoA_', metric_name[mm], '.csv'))
}
}
ggplot(data=tab_lgd, aes(x=time, y=value, color=Method)) +
geom_point(size=2) + geom_line(aes(linetype=Type), size=1) +
scale_color_manual(values=color_method) +
theme(legend.position="bottom") +
guides(color = guide_legend(nrow = 2))
color_method <- c('#ff7f00', #orange for Bray
'#33a02c', #green for CTF
'#f525dd', #pink for TCAM
'#377eb8', #blue for TEMPTED
'#6a3d9a', #purple for Unifrac
'#e31a1c') #red for unweighted Unifrac
tab_lgd <- data.frame(Method=rep(c("Bray-Curtis", "CTF",
"TEMPTED", "UniFrac","Weighted UniFrac"),4),
value=rnorm(20), time=rnorm(20),
Type=c(rep("In-Sample",each=10), rep("Out-of-Sample", each=10)))
p_lgd <- ggplot(data=tab_lgd, aes(x=time, y=value, color=Method)) +
geom_point(size=2) + geom_line(aes(linetype=Type), size=1) +
scale_color_manual(values=color_method) +
theme(legend.position="bottom") +
guides(color = guide_legend(nrow = 2))
p_lgd
p_lgd <- ggplot(data=tab_lgd, aes(x=time, y=value, color=Method)) +
geom_point(size=2) + geom_line(aes(linetype=Type), size=1) +
scale_color_manual(values=color_method) +
theme(legend.position="bottom") +
guides(color = guide_legend(nrow = 2), linetype = guide_legend(nrow = 2))
p_lgd
color_method <- c('#ff7f00', #orange for Bray
'#33a02c', #green for CTF
'#f525dd', #pink for TCAM
'#377eb8', #blue for TEMPTED
'#6a3d9a', #purple for Unifrac
'#e31a1c') #red for unweighted Unifrac
tab_lgd <- data.frame(Method=rep(c("Bray-Curtis", "CTF", "TCAM",
"TEMPTED", "UniFrac","Weighted UniFrac"),4),
value=rnorm(24), time=rnorm(24),
Type=c(rep("In-Sample",each=12), rep("Out-of-Sample", each=12)))
p_lgd <- ggplot(data=tab_lgd, aes(x=time, y=value, color=Method)) +
geom_point(size=2) + geom_line(aes(linetype=Type), size=1) +
scale_color_manual(values=color_method) +
theme(legend.position="bottom") +
guides(color = guide_legend(nrow = 2), linetype = guide_legend(nrow = 2))
p_lgd
lgd <- get_legend(p_lgd)
p_lgd
color_method <- c('#ff7f00', #orange for Bray
'#33a02c', #green for CTF
'#FAFA33', #yellow for EMBED
'#0096FF', #blue for microTensor
'#f525dd', #pink for TCAM
'#5A5A5A', #gray for TEMPTED
'#7F00FF', #purple for Unifrac
'#e31a1c') #red for unweighted Unifrac
tab_lgd <- data.frame(Method=rep(c("Bray-Curtis", "CTF", "EMBED", "microTensor", "TCAM",
"TEMPTED", "UniFrac","Weighted UniFrac"),4),
value=rnorm(24), time=rnorm(24),
Type=c(rep("In-Sample",each=12), rep("Out-of-Sample", each=12)))
color_method <- c('#ff7f00', #orange for Bray
'#33a02c', #green for CTF
'#FAFA33', #yellow for EMBED
'#0096FF', #blue for microTensor
'#f525dd', #pink for TCAM
'#5A5A5A', #gray for TEMPTED
'#7F00FF', #purple for Unifrac
'#e31a1c') #red for unweighted Unifrac
tab_lgd <- data.frame(Method=rep(c("Bray-Curtis", "CTF", "EMBED", "microTensor", "TCAM",
"TEMPTED", "UniFrac","Weighted UniFrac"),4),
value=rnorm(4*length(color_method)), time=rnorm(4*length(color_method)),
Type=c(rep("In-Sample",each=2*length(color_method)), rep("Out-of-Sample", each=2*length(color_method))))
p_lgd <- ggplot(data=tab_lgd, aes(x=time, y=value, color=Method)) +
geom_point(size=2) + geom_line(aes(linetype=Type), size=1) +
scale_color_manual(values=color_method) +
theme(legend.position="bottom") +
guides(color = guide_legend(nrow = 2), linetype = guide_legend(nrow = 2))
p_lgd
lgd <- get_legend(p_lgd)
p_lgd
tab_lgd <- data.frame(Method=rep(c("Bray-Curtis", "CTF", "EMBED", "microTensor", "TCAM",
"TEMPTED", "UniFrac","Weighted UniFrac"),4),
value=(1:4*length(color_method)), time=1:(4*length(color_method)),
Type=c(rep("In-Sample",each=2*length(color_method)), rep("Out-of-Sample", each=2*length(color_method))))
p_lgd <- ggplot(data=tab_lgd, aes(x=time, y=value, color=Method)) +
geom_point(size=2) + geom_line(aes(linetype=Type), size=1) +
scale_color_manual(values=color_method) +
theme(legend.position="bottom") +
guides(color = guide_legend(nrow = 2), linetype = guide_legend(nrow = 2))
p_lgd
tab_lgd <- data.frame(Method=rep(c("Bray-Curtis", "CTF", "EMBED", "microTensor", "TCAM",
"TEMPTED", "UniFrac","Weighted UniFrac"),4),
value=rnorm(4*mm), time=rep(1:(2*mm),2),
Type=c(rep("In-Sample",each=2*mm), rep("Out-of-Sample", each=2*mm)))
p_lgd <- ggplot(data=tab_lgd, aes(x=time, y=value, color=Method)) +
geom_point(size=2) + geom_line(aes(linetype=Type), size=1) +
scale_color_manual(values=color_method) +
theme(legend.position="bottom") +
guides(color = guide_legend(nrow = 2), linetype = guide_legend(nrow = 2))
p_lgd
color_method <- c('#ff7f00', #orange for Bray
'#33a02c', #green for CTF
'#FAFA33', #yellow for EMBED
'#0096FF', #blue for microTensor
'#f525dd', #pink for TCAM
'#5A5A5A', #gray for TEMPTED
'#7F00FF', #purple for Unifrac
'#e31a1c') #red for unweighted Unifrac
mm <- length(color_method)
tab_lgd <- data.frame(Method=rep(c("Bray-Curtis", "CTF", "EMBED", "microTensor", "TCAM",
"TEMPTED", "UniFrac","Weighted UniFrac"),4),
value=rnorm(4*mm), time=rep(1:(2*mm),2),
Type=c(rep("In-Sample",each=2*mm), rep("Out-of-Sample", each=2*mm)))
p_lgd <- ggplot(data=tab_lgd, aes(x=time, y=value, color=Method)) +
geom_point(size=2) + geom_line(aes(linetype=Type), size=1) +
scale_color_manual(values=color_method) +
theme_bw() +
theme(legend.position="bottom") +
guides(color = guide_legend(nrow = 2), linetype = guide_legend(nrow = 2))
p_lgd
lgd <- get_legend(p_lgd)
color_method <- c('#ff7f00', #orange for Bray
'#33a02c', #green for CTF
'#00FFFF', #yellow for EMBED
'#0096FF', #blue for microTensor
'#f525dd', #pink for TCAM
'#5A5A5A', #gray for TEMPTED
'#7F00FF', #purple for Unifrac
'#e31a1c') #red for unweighted Unifrac
mm <- length(color_method)
tab_lgd <- data.frame(Method=rep(c("Bray-Curtis", "CTF", "EMBED", "microTensor", "TCAM",
"TEMPTED", "UniFrac","Weighted UniFrac"),4),
value=rnorm(4*mm), time=rep(1:(2*mm),2),
Type=c(rep("In-Sample",each=2*mm), rep("Out-of-Sample", each=2*mm)))
p_lgd <- ggplot(data=tab_lgd, aes(x=time, y=value, color=Method)) +
geom_point(size=2) + geom_line(aes(linetype=Type), size=1) +
scale_color_manual(values=color_method) +
theme_bw() +
theme(legend.position="bottom") +
guides(color = guide_legend(nrow = 2), linetype = guide_legend(nrow = 2))
p_lgd
lgd <- get_legend(p_lgd)
tab_lgd <- data.frame(Method=rep(c("Bray-Curtis", "CTF", "EMBED", "microTensor", "TCAM",
"TEMPTED", "UniFrac","Weighted UniFrac"),4),
value=rnorm(4*mm), time=rep(1:mm,4),
Type=c(rep("In-Sample",each=2*mm), rep("Out-of-Sample", each=2*mm)))
p_lgd <- ggplot(data=tab_lgd, aes(x=time, y=value, color=Method)) +
geom_point(size=2) + geom_line(aes(linetype=Type), size=1) +
scale_color_manual(values=color_method) +
theme_bw() +
theme(legend.position="bottom") +
guides(color = guide_legend(nrow = 2), linetype = guide_legend(nrow = 2))
p_lgd
lgd <- get_legend(p_lgd)
tab_lgd <- data.frame(Method=rep(c("Bray-Curtis", "CTF", "EMBED", "microTensor", "TCAM",
"TEMPTED", "UniFrac","Weighted UniFrac"),4),
value=rnorm(4*mm), time=rep(1:(2*mm),2),
Type=c(rep("In-Sample",each=2*mm), rep("Out-of-Sample", each=2*mm)))
p_lgd <- ggplot(data=tab_lgd, aes(x=time, y=value, color=Method)) +
geom_point(size=2) + geom_line(aes(linetype=Type), size=1) +
scale_color_manual(values=color_method) +
theme_bw() +
theme(legend.position="bottom") +
guides(color = guide_legend(nrow = 2), linetype = guide_legend(nrow = 2))
p_lgd
tab_lgd <- data.frame(Method=rep(c("Bray-Curtis", "CTF", "EMBED", "microTensor", "TCAM",
"TEMPTED", "UniFrac","Weighted UniFrac"),4),
value=rnorm(4*mm), time=rep(1:(mm),2),
Type=c(rep("In-Sample",each=2*mm), rep("Out-of-Sample", each=2*mm)))
p_lgd <- ggplot(data=tab_lgd, aes(x=time, y=value, color=Method)) +
geom_point(size=2) + geom_line(aes(linetype=Type), size=1) +
scale_color_manual(values=color_method) +
theme_bw() +
theme(legend.position="bottom") +
guides(color = guide_legend(nrow = 2), linetype = guide_legend(nrow = 2))
p_lgd
tab_lgd <- data.frame(Method=rep(c("Bray-Curtis", "CTF", "EMBED", "microTensor", "TCAM",
"TEMPTED", "UniFrac","Weighted UniFrac"),4),
value=rnorm(4*mm), time=rep(1:2, mm),
Type=c(rep("In-Sample",each=2*mm), rep("Out-of-Sample", each=2*mm)))
p_lgd <- ggplot(data=tab_lgd, aes(x=time, y=value, color=Method)) +
geom_point(size=2) + geom_line(aes(linetype=Type), size=1) +
scale_color_manual(values=color_method) +
theme_bw() +
theme(legend.position="bottom") +
guides(color = guide_legend(nrow = 2), linetype = guide_legend(nrow = 2))
p_lgd
tab_lgd <- data.frame(Method=rep(c("Bray-Curtis", "CTF", "EMBED", "microTensor", "TCAM",
"TEMPTED", "UniFrac","Weighted UniFrac"),4),
value=rnorm(4*mm), time=rep(1:4, mm),
Type=c(rep("In-Sample",each=2*mm), rep("Out-of-Sample", each=2*mm)))
p_lgd <- ggplot(data=tab_lgd, aes(x=time, y=value, color=Method)) +
geom_point(size=2) + geom_line(aes(linetype=Type), size=1) +
scale_color_manual(values=color_method) +
theme_bw() +
theme(legend.position="bottom") +
guides(color = guide_legend(nrow = 2), linetype = guide_legend(nrow = 2))
p_lgd
tab_lgd <- data.frame(Method=rep(c("Bray-Curtis", "CTF", "EMBED", "microTensor", "TCAM",
"TEMPTED", "UniFrac","Weighted UniFrac"),4),
value=rnorm(4*mm), time=rep(c(1,2,2,1), mm),
Type=c(rep("In-Sample",each=2*mm), rep("Out-of-Sample", each=2*mm)))
p_lgd <- ggplot(data=tab_lgd, aes(x=time, y=value, color=Method)) +
geom_point(size=2) + geom_line(aes(linetype=Type), size=1) +
scale_color_manual(values=color_method) +
theme_bw() +
theme(legend.position="bottom") +
guides(color = guide_legend(nrow = 2), linetype = guide_legend(nrow = 2))
p_lgd
tab_lgd
tab_lgd <- data.frame(Method=rep(c("Bray-Curtis", "CTF", "EMBED", "microTensor", "TCAM",
"TEMPTED", "UniFrac","Weighted UniFrac"),4),
value=rnorm(4*mm), time=rep(1:4, each-mm),
Type=c(rep("In-Sample",each=2*mm), rep("Out-of-Sample", each=2*mm)))
tab_lgd <- data.frame(Method=rep(c("Bray-Curtis", "CTF", "EMBED", "microTensor", "TCAM",
"TEMPTED", "UniFrac","Weighted UniFrac"),4),
value=rnorm(4*mm), time=rep(1:4, each=mm),
Type=c(rep("In-Sample",each=2*mm), rep("Out-of-Sample", each=2*mm)))
p_lgd <- ggplot(data=tab_lgd, aes(x=time, y=value, color=Method)) +
geom_point(size=2) + geom_line(aes(linetype=Type), size=1) +
scale_color_manual(values=color_method) +
theme_bw() +
theme(legend.position="bottom") +
guides(color = guide_legend(nrow = 2), linetype = guide_legend(nrow = 2))
p_lgd
