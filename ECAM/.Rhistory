library(ggplot2)
library(tidyverse)
library(vioplot)
library(DT)
library(pwr)
library(ggpubr)
library(reshape2)
library(cowplot)
set.seed(2021)
LDLchg <- na.omit(Case1LDL$LDLchg)
qt(0.975, 261)
qnorm(0.975)
knitr::opts_chunk$set(echo = TRUE)
Sys.setenv("LANGUAGE"="En")
Sys.setlocale("LC_ALL", "English")
#change for container
library(tidyverse)
library(vioplot)
library(DT)
library(pwr)
library(ggpubr)
library(reshape2)
library(cowplot)
#===========================================================================#
# Create HIV data
#===========================================================================#
Case1 <- read.csv(file="Data/data_Case1.csv", na.strings="",
stringsAsFactors=TRUE)
# create dataset with change in LDL from week 0 to week 24
Case1LDL <- Case1 %>% filter(week %in% c(0,24)) %>%
select(ntisid, Arm, week, LDL) %>%
reshape(v.names=c("LDL"), timevar="week", idvar="ntisid",
direction="wide", sep="w") %>%
mutate(LDLchg=LDLw24-LDLw0)
Case2 <- read.csv(file=paste0("Data/data_Case2.csv"), na.strings="",
stringsAsFactors=TRUE)
Case2$VL[which(Case2$VL<50)] <- 50  # if VL <50, set to 50, the lower limit
Case2$VL[which(Case2$VL>500000)] <- 500000  # set to upper limit
Case2 <- Case2 %>%  mutate(log10VL=log10(VL),
VLud=ifelse(VL<=50, 1, 0))  # indicator for undetectable VL
# Create vector of virologic control over follow-up indicator
getVC <- function(x){  # x will be a vector of 0s, 1s, or NAs
ifelse( any(x==0, na.rm=TRUE), 0, 1)
}
# apply the function above to the follow-up data only
# (no one in control at baseline)
Case2fup <- Case2 %>% filter(t !=0) %>% droplevels  #  follow-up data
VC <- tapply(Case2fup$VLud, Case2fup$SID, getVC)
# Merge it with the baseline data
Case2VC <- Case2 %>% filter(t==0) %>% select(SID, NonAdhBL) %>%
merge(y=VC, by.x="SID", by.y=0, all=TRUE) %>%
rename(VCfup=y) %>% droplevels()
rm(Case2fup, getVC, VC)  # clean up to prevent confusion
ggplot(data.frame(y = c(-3.5, 3.5)), aes(y)) +
stat_function(fun = dt, args = list(df = 262)) +
stat_function(fun = dt, args = list(df = 262),
xlim = c(-3.5, -1.97), geom = "area", fill = "darkred") +
stat_function(fun = dt, args = list(df = 262),
xlim = c(1.97,3.5), geom = "area", fill = "darkred") +
geom_text(x = -2.5, y = 0.09, label = "P(T<-1.97)=0.025") +
geom_text(x = 2.5, y = 0.09, label = "P(T>1.97)=0.025") +
geom_text(x = -1.97, y = -0.009, label = "-1.97") +
geom_text(x = 1.97, y = -0.009, label = "1.97") +
labs(title = "PDF of Student t(df=262)", x="T under H0", y="Density") +
theme_bw()+
theme(plot.title = element_text(hjust = 0.5))
ggplot(data.frame(y = c(-3.5, 3.5)), aes(y)) +
stat_function(fun = dt, args = list(df = 261)) +
stat_function(fun = dt, args = list(df = 261),
xlim = c(-1.97, 1.97), geom = "area", fill = "darkred") +
geom_text(x = -2.5, y = 0.09, label = "P(T<-1.97)=0.025") +
geom_text(x = 2.5, y = 0.09, label = "P(T>1.97)=0.025") +
geom_text(x = -1.97, y = -0.009, label = "-1.97") +
geom_text(x = 1.97, y = -0.009, label = "1.97") +
labs(title = "PDF of Student t(df=261)", x="T under H0", y="Density") +
theme_bw()+
theme(plot.title = element_text(hjust = 0.5))
seq(min(XX0),upp,l=99)
lines(XX3, dnorm(XX3, mu3, SE), lwd=5)
XX0 <- seq(-3*SE, 3*SE, l=100)  # mu=0
XX1 <- seq(-3*SE+10, 3*SE+10, l=100)  # mu=10
XX2 <- seq(-3*SE+15, 3*SE+15, l=100)  # mu=15
XX3 <- seq(-3*SE-15, 3*SE-15, l=100)  # mu=-15
par(mfrow=c(3,1))
pwr.norm.test(d=(0.40-0.50)/sqrt(0.5*(1-0.5)), n=30,
sig.level=0.05, power=NULL, alternative="two.sided")
pwr.p.test(h=(0.4-0.5)/sqrt(0.5*(1-0.5)), n=30, sig.level=0.05,
power=NULL, alternative="two.sided")
pwr.norm.test(d=(0.40-0.50)/sqrt(0.5*(1-0.5)), n=5,
sig.level=0.05, power=NULL, alternative="two.sided")
pwr.p.test(h=(0.4-0.5)/sqrt(0.5*(1-0.5)), n=5, sig.level=0.05,
power=NULL, alternative="two.sided")
pwr.p.test
?pwr.p.test
pwr.p.test(h=(0.4-0.5)/sqrt(0.5*(1-0.5)), n=5, sig.level=0.05)
pwr.norm.test(h=(0.4-0.5)/sqrt(0.5*(1-0.5)), n=5, sig.level=0.05)
pwr.norm.test(d=(0.4-0.5)/sqrt(0.5*(1-0.5)), n=5, sig.level=0.05)
pwr.norm.test(h=(0.4-0.5)/sqrt(0.5*(1-0.5)), n=25, sig.level=0.05)
pwr.norm.test(d=(0.4-0.5)/sqrt(0.5*(1-0.5)), n=25, sig.level=0.05)
pwr.t.test(d=(0.4-0.5)/sqrt(0.5*(1-0.5)), n=25, sig.level=0.05)
pwr.norm.test(1, n=25, sig.level=0.05)
pwr.p.test(1, n=25, sig.level=0.05)
?pwr.t.test
pwr.norm.test(d=(0.4-0.5)/0.6, n=300,
sig.level=0.05, power=NULL, alternative="two.sided")
pwr.p.test(h=(0.4-0.5)/sqrt(0.5*(1-0.5)), n=300, sig.level=0.05,
power=NULL, alternative="two.sided")
18*6
22/108
37/52
sampleID <- matirx(list(NULL), 10, 2)
sampleID <- matrix(list(NULL), 10, 2)
sampleID
class(sampleID[1,1])
library(spatialDE)
library(ggplot2)
if (!requireNamespace("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
BiocManager::install("spatialDE")
if (!requireNamespace("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
BiocManager::install("spatialDE")
library(spatialDE)
library(ggplot2)
if (!requireNamespace("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
BiocManager::install("spatialDE")
library('Hmisc', 'interp', 'ade4', 'classInt', 'cluster', 'conquer', 'deSolve', 'dotCall64',
'fastmatrix', 'fields', 'glmnet', 'gmp', 'graphlayouts', 'igraph', 'irlba', 'kernlab', 'Matrix',
'MatrixModels', 'mclust', 'mets', 'mgcv', 'minqa', 'nlme', 'nloptr', 'pcaPP', 'polspline',
'quantreg', 'raster', 'RcppArmadillo', 'RcppEigen', 'reticulate', 'rgl', 'RSpectra', 'RSQLite',
'Rtsne', 'sctransform', 'Seurat', 'SeuratObject', 'sf', 'sm', 'spam', 'spdep', 'statmod',
'terra', 'timereg', 'vegan', 'VGAM')
tmp <- c('Hmisc', 'interp', 'ade4', 'classInt', 'cluster', 'conquer', 'deSolve', 'dotCall64',
'fastmatrix', 'fields', 'glmnet', 'gmp', 'graphlayouts', 'igraph', 'irlba', 'kernlab', 'Matrix',
'MatrixModels', 'mclust', 'mets', 'mgcv', 'minqa', 'nlme', 'nloptr', 'pcaPP', 'polspline',
'quantreg', 'raster', 'RcppArmadillo', 'RcppEigen', 'reticulate', 'rgl', 'RSpectra', 'RSQLite',
'Rtsne', 'sctransform', 'Seurat', 'SeuratObject', 'sf', 'sm', 'spam', 'spdep', 'statmod',
'terra', 'timereg', 'vegan', 'VGAM')
for (i in 1:length(tmp)) library(tmp[i])
tmp[i]
library(tmp[1])
legnth(tmp[1])
length(tmp[1])
library(Hmisc)
for (i in 1:length(tmp)) library(eval(tmp[i]))
for (i in 1:length(tmp)) library(cat(tmp[i]))
eval(tmp[i])
parse(tmp[i])
for (i in 1:length(tmp)) library(parse(tmp[i]))
Hmisc
get(tmp[1])
for (i in 1:length(tmp)) library(get(tmp[i]))
?library
tmp[2]
library("interp")
tmp
library(ade4)
library(classInt)
library(cluster)
if (!requireNamespace("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
BiocManager::install("spatialDE")
r.version
version
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.15")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.11")
library(SpatialDE)
library(Seurat)
warnings()
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.11")
install.packages('ape')
library(ape)
install.packages('Rfast2')
library(Rfast2)
install.packages('devtools')
library(devtools)
install.packages('devtools')
deps = c('BiocParallel', 'genefilter', 'DESeq2')
new_deps = deps[!(deps %in% installed.packages()[,"Package"])]
if(length(new_deps) != 0){BiocManager::install(new_deps)}
library('devtools')
devtools::install_github('edsgard/trendsceek')
library(trendsceek)
install.packages('sf')
packageVersion('spatstat')
remotes:install_version("spatstat", version="1.64-1")
library(remotes)
remotes:install_version("spatstat", version="1.64-1")
library(devtools)
remotes:install_version("spatstat", version="1.64-1")
library(remotes)
?install_version("spatstat", version="1.64-1")
install_version("spatstat", version="1.64-1")
res_spatialDE <- read.csv('Result/res_spatialDE.csv', header=TRUE)
plot(1,1)
40/57
34/52
57*0.65
40/52
24.99*0.9*1.075
24.99*0.9*1.075-5
32.5*0.9*1.075+5
log(0.9,10)
log(1:10/10,10)
plot(log(1:10/10,10))
plot(1:10/10,log(1:10/10,10))
plot(1:10/10,-log(1:10/10,10))
plot(1:100/100,-log(1:10/10,10))
plot(1:100/100,-log(1:100/100,10))
BiocManager::install("MOFA2")
BiocManager::install("MOFA2", force=T)
reticulate::use_python("/Users/pixushi/miniconda3/bin/python")
reticulate::python_config()
reticulate::use_python_version("/Users/pixushi/miniconda3/bin/python")
540/28
50000/25
50000/25/300
300*6*35
?plot.lm
knitr::opts_chunk$set(echo = TRUE)
Sys.setenv("LANGUAGE"="En")
Sys.setlocale("LC_ALL", "English")
library(tidyverse)
library(lme4)
library(nlme)
library(abind)
library(survival)
library(cmprsk)
#===========================================================================#
# Create Case 1 datasets
#===========================================================================#
Case1 <- read.csv(file="Data/data_Case1.csv", na.strings="",
stringsAsFactors=TRUE)
# create dataset with change in LDL from week 0 to week 24
Case1LDL <- Case1 %>% filter(week %in% c(0,24)) %>%
select(ntisid, week, LDL) %>%
reshape(v.names=c("LDL"), timevar="week", idvar="ntisid",
direction="wide", sep="w") %>%
mutate(LDLchg=LDLw24-LDLw0)
Case1BL <- Case1  %>% filter(week==0) %>% droplevels()
Case1LDL <- merge(x=Case1BL, y=Case1LDL, by="ntisid", all=TRUE) %>%
mutate(log10vl=log10(hivRNA),
Arm=relevel(Arm, ref="B"))     # relevel arm so B is the reference
#===========================================================================#
# Create Case 1 TTE data
#===========================================================================#
Arm <- Case1 %>% filter(week==0) %>% select(ntisid, Arm) %>%
mutate(Arm=relevel(Arm, ref="B")) %>% droplevels()
TTE <- read.csv(file="Data/data_Case1_TTE.csv", na.strings="",
stringsAsFactors=TRUE) %>%
select(ntisid, Time_VFT, Status_VFT)  # focus on composite outcome
TTE <- merge(Arm, TTE, by="ntisid", all=TRUE) %>%
mutate(Status_VFT2cat=ifelse(Status_VFT==1 | Status_VFT==2, 1, 0),
Status_VFT3cat=ifelse(Status_VFT==2, 1, Status_VFT),
Crisk=ifelse(Status_VFT==4, 1, 0))
# addmargins(table(TTE$Arm, TTE$Status_VFT, exclude=NULL))
#===========================================================================#
# Create Case 2 datasets
#===========================================================================#
Case2 <- read.csv(file=paste0("Data/data_Case2.csv"), na.strings="",
stringsAsFactors=TRUE)
Case2$VL[which(Case2$VL<50)] <- 50  # if VL <50, set to 50, the lower limit
Case2$VL[which(Case2$VL>500000)] <- 500000  # set to upper limit
Case2 <- Case2 %>%  mutate(log10VL=log10(VL),
VLud=ifelse(VL<=50, 1, 0))  # indicator for undetectable VL
# Create vector of virologic control over follow-up indicator
getVC <- function(x){  # x will be a vector of 0s, 1s, or NAs
ifelse( any(x==0, na.rm=TRUE), 0, 1)
}
# apply the function above to the follow-up data only
# (no one in control at baseline)
Case2fup <- Case2 %>% filter(t !=0) %>% droplevels  #  follow-up data
VC <- tapply(Case2fup$VLud, Case2fup$SID, getVC)
# Merge it with the baseline data
Case2VC <- Case2 %>% filter(t==0) %>% select(-VLud) %>%
merge(y=VC, by.x="SID", by.y=0, all=TRUE) %>%
rename(VCfup=y) %>% droplevels()
rm(Arm, Case1BL, Case2fup, getVC, VC)  # clean up to prevent confusion
x <- 1:100/100
y <- log(x/1-x)
plot(x,y,main="logit function")
x <- 1:99/100
y <- log(x/1-x)
plot(x,y,main="logit function")
x <- 1:99/100
y <- log(x/1-x)
plot(x,y,main="logit function")
x
log(x)
log(1-x)
x <- 1:99/100
y <- log(x/(1-x))
plot(x,y,main="logit function")
plot(x,y,type="l",main="logit function")
?pred.glm
?pred
?predict.glm
451/13
246/9
14*16
library(dada2)
library(readr)
library(stringr)
install.packages('dada2')
library(dada2)
library("devtools")
devtools::install_github("benjjneb/dada2", ref="v1.16")
library(dada2)
library(readr)
library(stringr)
library(dplyr)
library(tibble)
library(magrittr)
library(phyloseq)
library(ggplot2)
library(fs)
library(tidyr)
library(here)
"content/config.R" %>%
here() %>%
source()
getwd()
nkeep <- c(2,3,4,5,6,7,8,9,10)
nsim <- 100
set.seed(0)
rm(list=ls())
# for data
library(qiime2R) # read in Qiime artifacts
# for data
library(qiime2R) # read in Qiime artifacts
library(dplyr) # data formatting
# for computing
library(reticulate) # run py codes
library(vegan) # distance matrix
library(PERMANOVA) # permanova
library(randomForest) # random forest
library(PRROC) # roc and pr
# for plotting
library(ggpubr)
library(ggplot2)
library(gridExtra)
library(RColorBrewer)
# set working directory to be where the current script is located
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
color_RB <- brewer.pal(3,'Set1')[1:2]
source('../TEMPTED.R')
getwd()
rm(list=ls())
# for data
library(qiime2R) # read in Qiime artifacts
library(dplyr) # data formatting
# for computing
library(reticulate) # run py codes
library(vegan) # distance matrix
library(PERMANOVA) # permanova
library(randomForest) # random forest
library(PRROC) # roc and pr
# for plotting
library(ggpubr)
library(ggplot2)
library(gridExtra)
library(RColorBrewer)
# set working directory to be where the current script is located
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
color_RB <- brewer.pal(3,'Set1')[1:2]
source('../TEMPTED.R')
getwd()
count_tab <- read.csv("data/otu_count_cleaned_q2.csv", row.names=1)
meta_tab <- read.csv("data/otu_metadata_cleaned_q2.csv", row.names=1)
taxon_tab <- read.csv("data/otu_taxonomy_cleaned_q2.csv", row.name=1)
table(rownames(count_tab)==rownames(meta_tab))
# remove distal gut samples
ind <- meta_tab$qiita_empo_3=='anthropogenic sample' | is.na(meta_tab$qiita_empo_3)
count_tab <- count_tab[ind,]
meta_tab <- meta_tab[ind,]
meta_tab$delivery_ind <- 'Vaginal'==meta_tab$delivery
table(rownames(count_tab)==rownames(meta_tab))
metauni <- unique(meta_tab[,c('studyid', 'delivery_ind', 'diet')])
rownames(metauni) <- metauni$studyid
nkeep <- c(2,3,4,5,6,7,8,9,10)
nsim <- 100
set.seed(0)
load(file.path("simdata", "realsim_ecam_sampleID.Rdata"))
nkeep <- as.numeric(colnames(sampleID))
nsim <- nrow(sampleID)
npc <- 2
npc <- 2
roc_glm_oos <- matrix(NA, nsim, length(nkeep))
colnames(roc_glm_oos) <- paste0("nsample", nkeep)
pr_rf_oos <- roc_rf_oos <- pr_glm_oos <- roc_glm_oos
for (jj in 1:length(nkeep)){
print(jj)
for (ss in 1:nsim){
count_sub <- count_tab[sampleID[ss,jj][[1]],]
meta_sub <- meta_tab[sampleID[ss,jj][[1]],]
subdata <- format_tempted(count_sub, meta_sub$day_of_life, meta_sub$studyid,
threshold=0.95, pseudo_count=0.5, transform='clr')
metauni_sub <- metauni[names(subdata),]
# leave one out prediction
predprob_glm <- predprob_rf <- rep(NA, length(subdata))
for (ii in 1:length(subdata)){
print(ii)
svd_train <- svd_centralize(subdata[-ii])
res_train <- tempted(svd_train$datlist, r = npc, resolution = 101, smooth=1e-4)
A_test <- est_A(subdata[ii], res_train, svd_train)
dftrain <- data.frame(y=metauni[-ii,'delivery_ind'], x=res_train$A)
dftest <- data.frame(y=metauni[ii,'delivery_ind'], x=A_test)
# random forest
rf_fit <- randomForest(as.factor(y) ~ ., data = dftrain)
predprob_rf[ii] <- predict(rf_fit, newdata=dftest, type = "prob")[,"TRUE"]
}
roc_rf_oos[ss,jj] <- roc.curve(predprob_rf[metauni_sub$delivery_ind],
predprob_rf[!metauni_sub$delivery_ind])$auc
pr_rf_oos[ss,jj] <- pr.curve(predprob_rf[metauni_sub$delivery_ind],
predprob_rf[!metauni_sub$delivery_ind])$auc.integral
}
#write.csv(pr_glm_oos, file="result/realsim_ecam_pr_oos_glm_tempted.csv")
#write.csv(roc_glm_oos, file="result/realsim_ecam_roc_oos_glm_tempted.csv")
write.csv(pr_rf_oos, file="result/realsim_ecam_pr_oos_rf_tempted.csv")
write.csv(roc_rf_oos, file="result/realsim_ecam_roc_oos_rf_tempted.csv")
}
nkeep <- c(2,3,4,5,6,7,8,9,10)
nsim <- 100
set.seed(0)
rm(list=ls())
library(dplyr) # data formatting
# for computing
library(reticulate) # run py codes
# for computing
library(reticulate) # run py codes
library(vegan) # distance matrix
library(PERMANOVA) # permanova
# for computing
library(reticulate) # run py codes
library(vegan) # distance matrix
library(PERMANOVA) # permanova
library(randomForest) # random forest
library(PRROC) # roc and pr
# for plotting
library(ggpubr)
library(ggplot2)
library(gridExtra)
library(RColorBrewer)
# set working directory to be where the current script is located
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
color_RB <- brewer.pal(3,'Set1')[1:2]
source('../TEMPTED.R')
count_tab <- read.csv("data/otu_count_cleaned_q2.csv", row.names=1)
taxon_tab <- read.csv("data/otu_taxonomy_cleaned_q2.csv", row.name=1)
table(rownames(count_tab)==rownames(meta_tab))
# remove distal gut samples
ind <- meta_tab$qiita_empo_3=='anthropogenic sample' | is.na(meta_tab$qiita_empo_3)
getwd()
count_tab <- read.csv("data/otu_count_cleaned_q2.csv", row.names=1)
meta_tab <- read.csv("data/otu_metadata_cleaned_q2.csv", row.names=1)
taxon_tab <- read.csv("data/otu_taxonomy_cleaned_q2.csv", row.name=1)
table(rownames(count_tab)==rownames(meta_tab))
# remove distal gut samples
ind <- meta_tab$qiita_empo_3=='anthropogenic sample' | is.na(meta_tab$qiita_empo_3)
count_tab <- count_tab[ind,]
meta_tab <- meta_tab[ind,]
meta_tab$delivery_ind <- 'Vaginal'==meta_tab$delivery
table(rownames(count_tab)==rownames(meta_tab))
metauni <- unique(meta_tab[,c('studyid', 'delivery_ind', 'diet')])
rownames(metauni) <- metauni$studyid
nkeep <- c(2,3,4,5,6,7,8,9,10)
nsim <- 100
set.seed(0)
load(file.path("simdata", "realsim_ecam_sampleID.Rdata"))
nkeep <- as.numeric(colnames(sampleID))
nsim <- nrow(sampleID)
npc <- 2
jj=1
ss=1
ntime <- nkeep[jj]
count_sub <- count_tab[sampleID[ss,jj][[1]],]
meta_sub <- meta_tab[sampleID[ss,jj][[1]],c("studyid", "day_of_life", "month", "delivery")]
meta_sub$studyid <- as.character(meta_sub$studyid)
meta_sub$month <- as.numeric(meta_sub$month)
meta_sub$delivery_ind <- meta_sub$delivery=="Vaginal"
metauni <- unique(meta_sub[,c("studyid", "delivery_ind")])
py_run_file(file="run_ecam_ctf.py",convert=F)
unload(reticulate)
detach("package:reticulate")
library(reticulate)
py_run_file(file="run_ecam_ctf.py",convert=F)
getwd()
library(knitr)
knit("simulate_ecam_final.Rmd", "simulate_ecam_final.md")
setwd("../Leukemia/")
knit("analysis_leukemia_final.Rmd", "analysis_leukemia_final.md")
setwd("../Vaginal_Stanford/")
knit("analysis_Stanford_vaginal_final.Rmd", "analysis_Stanford_vaginal_final.md")
getwd()
knit("analysis_Stanford_vaginal_final.Rmd", "analysis_Stanford_vaginal_final.md")
setwd("../Vaginal/")
knit("plot_vaginal_final.Rmd", "plot_vaginal_final.md")
setwd("../Leukemia/")
knit("analysis_leukemia_final.Rmd", "analysis_leukemia_final.md")
setwd("../ECAM/")
knit("simulate_ecam_final.Rmd", "simulate_ecam_final.md")
